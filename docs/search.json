[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Powering Institutional Research with R",
    "section": "",
    "text": "Preface\nThis online reference guide has been developed to accompany the October 19, 2023 workshop of the Ohio Association for Institutional Research and Planning, held at Mount Vernon, Ohio.\nThe workshop will follow a timeline aligned to the sections of this reference guide:\n\nChapter 1: Software setup and overview\nChapter 2: Importing and cleaning data\nChapter 3: Statistical analyses & data visualizations\nChapter 4: Building parameterized reports\nChapter 5: Collaborating on code\n\nThis reference guide is designed for institutional researchers, by institutional researchers, so it’s chock full of examples relevant to IR and often compares R functions to what you might use in Microsoft Excel."
  },
  {
    "objectID": "intro.html#installation",
    "href": "intro.html#installation",
    "title": "1  Software setup and overview",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nFirst, we’ll want to install the R software (R Core Team 2023). Go to https://r-project.org and follow the download link.\nThat will take you to the Comprehensive R Archive Network, or CRAN, which is “a network of servers that store identical, up-to-date, versions of code and documentation for R.”\nThe closest CRAN mirror for Institutional Researchers working in Ohio is hosted by Case Western Reserve University. Its web address is https://cran.case.edu.\nChoose the distribution appropriate for your operating system under “Download and Install R,” then click on the link for “install R for the first time,” and then finally the larger “Download R…” link. Accept the licenses and the default settings."
  },
  {
    "objectID": "intro.html#using-the-r-terminal",
    "href": "intro.html#using-the-r-terminal",
    "title": "1  Software setup and overview",
    "section": "1.2 Using the R Terminal",
    "text": "1.2 Using the R Terminal\nYou should now be able to find R listed among your installed programs. Go ahead and run it. You should see a screen like this:\n\nThe inner window is the R Console, also called the R Terminal, which is the R software interface:\n\nLet’s run our first command. Since R is statistical software after all, let’s use it as a calculator. Enter 1 + 1 and press Enter. You should see the following:\n\n1 + 1\n\n[1] 2\n\n\nCongrats, you’ve run your first R command!"
  },
  {
    "objectID": "intro.html#sec-installRpackages",
    "href": "intro.html#sec-installRpackages",
    "title": "1  Software setup and overview",
    "section": "1.3 Installing R packages",
    "text": "1.3 Installing R packages\nThough base R contains all kinds of helpful functions and tools, installing R packages provide additional functionality.\nCRAN includes both the base R system and an array of approved R packages.\nOne such package that we’ll be using is tidyverse, a collection of R packages that make data analysis in R better. We’ll learn more about tidyverse in Chapter 2.\nTo install the package, run the following command in the terminal:1\n\ninstall.packages(\"tidyverse\")\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that the package name must be in quotes (\"\") in the install.packages() command.\n\n\nWhen you first install an R package in a session, you will be prompted to choose a CRAN mirror, like you did when you first downloaded R:\n\nWe’ll choose USA (OH) [https], which is the mirror hosted in Ohio by Case.\n\n\n\n\n\n\nTip\n\n\n\nSee Section 1.6.5 for details on how to set your default CRAN repository.\n\n\nWe’ll install additional packages later.\nAccessing R in the basic R terminal is fairly limited, so we can close out of the program (or enter the q() command). R will ask you if you’d like to save the workspace image - just click “No”."
  },
  {
    "objectID": "intro.html#using-an-ide",
    "href": "intro.html#using-an-ide",
    "title": "1  Software setup and overview",
    "section": "1.4 Using an IDE",
    "text": "1.4 Using an IDE\nThe better way to work with R is to use an integrated development environment, or IDE. The IDE includes the R Terminal that will show the R output, but also additional helpful features like a file editor (to work with a script), a file browser, an image viewer (to view graph and other figure output), an R object viewer, R help text, and more.\n\nR Studio\nOne popular IDE for R is the open source edition of R Studio, developed by posit, a company that contributes greatly to various R packages and tools, including Quarto which we’ll use in Chapter 4. It can be downloaded at https://posit.co/products/open-source/rstudio/.\nAfter you install and run for the first time, and let it detect the installation of R, your screen should look like this:\n\n\n\nOn the left is the R Console, with a tab for your OS Terminal. On the top right is the R environment, an R object viewer, with additional tabs for history, etc. On the bottom right is a file viewer, with additoinal tabs for plots, packages, help, and more.\n\n\n\n\nVisual Studio Code\nOne popular alternative to R Studio is Visual Studio Code. Visual Studio Code, or VS Code, is developed by Microsoft, and designed for a wide range of programming languages, supported by many extensions. Visual Studio Code’s source code is open source, but has additional Microsoft capabilities.2 Head to https://code.visualstudio.com to download Visual Studio Code.\n\n\n\n\n\n\nNote\n\n\n\nSince Visual Studio Code is designed to work with many languages, you’ll need to complete additional steps to configure VS Code for working with R. For this reason, it may be best to begin using R Studio and revisit VS Code at a later time. However, VS Code does include additonal features and better integration with Git and GitHub, which will be detailed in Chapter 5.\n\n\nYou’ll then need to install the R extension for Visual Studio Code which can be done using the Extensions module on the far left (or using Ctrl+Shift+X). You’ll also need to install the langugageserver package and want to install the httpgd package so that Visual Studio Code can display help text and plots, respectively. Refer back to Section 1.3 for details how to install packages.\nDepending on how you installed R, you may need to point Visual Studio Code to your R installation. Enter Settings (File &gt; Preferences &gt; Settings or Ctrl+,) then type or look for RTerm for your operating system. Point this to your instance of R (e.g. C:\\Program Files\\R\\R-4.3.1\\bin\\R.exe).\n\n\n\nOn the far left is a set of icons for the various modules, with the first selected for File Explorer and the R environment icon also visible. On the right is the Welcome window; this area will show file contents and view output when requested. On the bottom is a set of terminals, one of which is for R."
  },
  {
    "objectID": "intro.html#creating-a-project",
    "href": "intro.html#creating-a-project",
    "title": "1  Software setup and overview",
    "section": "1.5 Creating a project",
    "text": "1.5 Creating a project\nIrrespective of the IDE you are using, you’ll use folders on your computer to hold a file or set of files for an R project. Go ahead and create a new folder in a location on your computer, such as Documents\\MyFirstRProject\\.\nDepending on your IDE, you’ll open your project by:\n\nIn R Studio, you’ll first click on “Project: (None)” in the upper right, then “New Project”, then “Existing Directory”, then point to the folder you created.\nIn VS Code, you’ll click “Open Folder” from the Welcome screen.\n\n\n\n\n\n\n\nTip\n\n\n\nIf you end up with a lot of files, you can create folders within your project folder. This can help keep your project organized."
  },
  {
    "objectID": "intro.html#writing-an-r-script",
    "href": "intro.html#writing-an-r-script",
    "title": "1  Software setup and overview",
    "section": "1.6 Writing an R script",
    "text": "1.6 Writing an R script\nUp until now, we’ve entered commands directly into the R terminal. But much of the power of using R comes from writing many lines of code that work together.\nTo do this, we can create files that contain such code, as scripts.\nCreate a new .R file in your project folder. You can call it anything you’d like, such as script.R. By using the .R (or .r) extension, you’re indicating that the file is an R script.\nAt the top of the file we want to load any R packages that we’ll be using. We do this with the library() function. Let’s load tidyverse, then run our code (by clicking the Run button):\n\n\n\nscript.R\n\nlibrary(\"tidyverse\")\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNotice that the output shows the exact packages loaded as part of tidyverse. Not all packages have an output, but many do display some helpful information. The conflicts section notes that certain functionality from base R (stats) is masked by the packages loaded. This means when we run a function like filter(), by default it will now use the version from dplyr, which is part of tidyverse. We can always explicitly run a certain version by entering a function in the format package::function(), like stats::filter().\n\n\n\n\n\n\nImportant\n\n\n\nNote that we never include an install.packages() command in our R script, only in the terminal. We don’t want to modify our computer using our script, and this is espeically important when we get to sharing code!\n\n\nNow we can add additional code to the script. Let’s create a new object my_fav_number and assign it the value of 2. We’ll then ask the system to print out that object, so that we can see the value. Don’t worry, we’ll go over exactly what is happening here in Chapter 2.\n\n\n\nscript.R\n\nlibrary(\"tidyverse\")\n\nmy_fav_number &lt;- 2\n\nprint(my_fav_number)\n\n\nFinally, let’s add notes to ourselves so that we can remember what our code is doing. To do this, we use comments. In R, comments are denoted by the # symbol. When R encounters a # symbol, everything in the same line after that symbol is ignored when running the code. We always add a space between the # symbol and the text we’d like to use as a comment.\nWe can use comments at the end of a line of code to describe what is happening in that line, and we can write a comment as a whole line in the code to show what is happening in sections of code:\n\n\n\nscript.R\n\n# load libraries\nlibrary(\"tidyverse\")\n\nmy_fav_number &lt;- 2  # 2 is my favorite number\n\nprint(my_fav_number) # print out the stored value\n\n\nNow that we’ve written our first R script (!), we can run it. We can either run the entire script at once, or walk through the code line-by-line with Shift-Ctrl. Walking through code line-by-line can be a great way to develop code and test as you go. You should see the terminal return:\n\n\n[1] 2\n\n\nA few notes about keeping your code clean:\n\nUse blank lines to separate logically separate lines of code.\nUse spaces properly around characters and symbols.\nUse comments to keep your code comprehensible.\n\nWe’ll go over additional notes about writing clean code in the coming chapters."
  },
  {
    "objectID": "intro.html#exersices",
    "href": "intro.html#exersices",
    "title": "1  Software setup and overview",
    "section": "Exersices",
    "text": "Exersices\n\nExercise 1\nIn Chapter 2 we’ll use the package readxl to read in data from Excel files, since IR professionals often encounter data we need to work with in Excel files! How would you install the readxl package?\n\n\nCode\ninstall.packages(\"readxl\")\n\n\n\n\nExercise 2\nStart a new R script that loads the readxl package. Include a comment to remind you of what is happening.\n\n\nCode\n# load libraries\nlibrary(\"readxl\") # to read data from Excel files"
  },
  {
    "objectID": "intro.html#extra-keeping-r-up-to-date",
    "href": "intro.html#extra-keeping-r-up-to-date",
    "title": "1  Software setup and overview",
    "section": "Extra: Keeping R up-to-date",
    "text": "Extra: Keeping R up-to-date\n\nUpdating R packages\nIn the R terminal, run:\n\nupdate.packages()\n\nPackages with new updates will be detected and you will be prompted to respond Y or yes to accept.\nIf you want all packages updated without your confirmation, you can add the ask = FALSE argument:\n\nupdate.packages(ask = FALSE)\n\n\n\n\n\n\n\nTip\n\n\n\nYou will see a warning when packages are built under a different version of R than you are running. If you see this, you likely want to update your version of R.\n\n\n\n\nUpdating R\nThe installr package can assist with keeping the R installation up-to-date. In the terminal, run the following:\n\ninstallr::updateR()\n\n\n\n\n\n\n\nTip\n\n\n\nYou will be prompted as to whether you’d like to copy over all packages from the current version of R. This is a good idea!"
  },
  {
    "objectID": "intro.html#extra-r-profile-and-environment",
    "href": "intro.html#extra-r-profile-and-environment",
    "title": "1  Software setup and overview",
    "section": "Extra: R Profile and Environment",
    "text": "Extra: R Profile and Environment\nR will read certain options from special files that you can modify:\n\nR profile\nYour R profile can contain a range of settings to customize how you interact with R.\nThe usethis package can be used to edit your R profile:\n\nusethis::edit_r_profile()\n\nA new window will open with your R profile file that you can edit.\nFor example, you may want to set your default CRAN mirror to the one hosted at Case, since it is in Ohio and you may be as well. Add the following line to your R profile file:\n\n\n\n.Rprofile\n\noptions(repos=c(CRAN=\"https://cran.case.edu/\"))\n\n\nWhen done, save the file, then close all R terminals and reopen them.\n\n\nR environment\nThe R environment can store variables that you can call upon using special R functions. It is a great way to keep keys and other secrets out of your code but still accessible.\nThe usethis package can be used to easily edit your R environment:\n\nusethis::edit_r_envrion()\n\nTo store a variable named test_var, add the following to the file:\n\n\n\n.Renviron\n\ntest_var:\"this is my test value\"\n\n\nWhen done, save the file, then close all R terminals and reopen them.\nYou’ll be able to access such variables like so:\n\nSys.getenv(\"test_var\")\n\n[1] \"this is my test value\"\n\n\n\n\n\n\n\n\nWarning\n\n\n\nSome packages request that you store things like API keys as specified environment variables. You can also use this to store common URLs, including FTP sites, but keep in mind that they are accessible directly in the .Renviron file on your computer.\n\n\n\n\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/."
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "1  Software setup and overview",
    "section": "",
    "text": "Yes, you can also use the menus to install packages, but we won’t be using this interface for long.↩︎\nCheck out https://vscodium.com for a version without these Microsoft customizations.↩︎"
  },
  {
    "objectID": "workingwithdata.html#creating-r-data-objects",
    "href": "workingwithdata.html#creating-r-data-objects",
    "title": "2  Importing and cleaning data",
    "section": "2.1 Creating R data objects",
    "text": "2.1 Creating R data objects"
  },
  {
    "objectID": "workingwithdata.html#importing-data",
    "href": "workingwithdata.html#importing-data",
    "title": "2  Importing and cleaning data",
    "section": "2.2 Importing data",
    "text": "2.2 Importing data\n\nBy file format\n\nComma-separated values (.csv)\n\n\nExcel files (.xlsx)\n\nlibrary(\"readxl\")\n\n\n\n\nBy file location\n\nFrom a local file\n\n\nFrom an online file\n\nlibrary(\"curl\")\n\n\n\n\nFrom a database"
  },
  {
    "objectID": "workingwithdata.html#tidy-data",
    "href": "workingwithdata.html#tidy-data",
    "title": "2  Importing and cleaning data",
    "section": "2.3 Tidy data",
    "text": "2.3 Tidy data\nWickham et al. (2019)\n\nlibrary(\"tidyverse\")"
  },
  {
    "objectID": "workingwithdata.html#sec-dataset1",
    "href": "workingwithdata.html#sec-dataset1",
    "title": "2  Importing and cleaning data",
    "section": "2.4 In Practice: Dataset #1 – IPEDS data",
    "text": "2.4 In Practice: Dataset #1 – IPEDS data\nFor working with our first dataset, we’ll of course begin with data from the Integrated Postsecondary Education Data System (IPEDS). Though many IR professionals are used to working with the web interface of the IPEDS data center, we also have the opportunity to interact with the complete data files, which are available as comma-separated values files (.csv) in a compressed format (.zip), or as Access databases. We’ll be working with the .csv files for now.1\nIf we go to the IPEDS Data Center and click on “Complete Data Files”, we’ll reach this page: https://nces.ed.gov/ipeds/datacenter/DataFiles.aspx. We can hover over the various file links and note that they share a similar stem and file format. Let’s set two variables to start: one to store this URL stem and one to store the latest year available:\n\nIPEDS_url &lt;- \"https://nces.ed.gov/ipeds/datacenter/data/\"\nIPEDS_year &lt;- 2022\n\nNext we’re going to load libraries we’ll need to use. tidyverse should be loaded already but we’ll load it again. The curl package will assist us in downloading files.\n\n# load libraries\nlibrary(\"tidyverse\")\nlibrary(\"curl\")\n\nLet’s use the simple curl_download() function from the curl package. We need to provide it two parameters: a URL to download and a filename for the downloaded file. We can build both of those by concatenating info to match the available links using the variables we stored above. We’ll grab the IPEDS Directory Information data, which comes from the Institutional Characteristics Header component (“HD”), and the Completions component data (“C”). We can create the filenames and URLs by concatenating text fields. In Excel we would use CONCATENATE() or the special concatenation character (&), but using tidyverse we will use str_c():\n\ncurl_download(\n  str_c(IPEDS_url, \"HD\", IPEDS_year, \".zip\"),\n  destfile = str_c(\"HD\", IPEDS_year, \".zip\")\n)\n\ncurl_download(\n  str_c(IPEDS_url, \"C\", IPEDS_year, \"_A\", \".zip\"),\n  destfile = str_c(\"C\", IPEDS_year, \"_A\", \".zip\")\n)\n\nNext we need to import the downloaded files into R and begin cleaning the data. We’ll start with the directory information data. We’ll begin using read_csv(), which we can use to read in the .csv file contained in the .zip file. We’ll store the data as institutions, then take a peek at the imported data using glimse():\n\ninstitutions &lt;- read_csv(\n    str_c(\"HD\", IPEDS_year, \".zip\")\n)\n\nRows: 6256 Columns: 73\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (23): INSTNM, IALIAS, ADDR, CITY, STABBR, ZIP, CHFNM, CHFTITLE, EIN, UEI...\ndbl (50): UNITID, FIPS, OBEREG, GENTELE, OPEFLAG, SECTOR, ICLEVEL, CONTROL, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(institutions)\n\nRows: 6,256\nColumns: 73\n$ UNITID   &lt;dbl&gt; 100654, 100663, 100690, 100706, 100724, 100733, 100751, 10076…\n$ INSTNM   &lt;chr&gt; \"Alabama A & M University\", \"University of Alabama at Birming…\n$ IALIAS   &lt;chr&gt; \"AAMU\", \"UAB\", \"Southern Christian University  Regions Univer…\n$ ADDR     &lt;chr&gt; \"4900 Meridian Street\", \"Administration Bldg Suite 1070\", \"12…\n$ CITY     &lt;chr&gt; \"Normal\", \"Birmingham\", \"Montgomery\", \"Huntsville\", \"Montgome…\n$ STABBR   &lt;chr&gt; \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"…\n$ ZIP      &lt;chr&gt; \"35762\", \"35294-0110\", \"36117-3553\", \"35899\", \"36104-0271\", \"…\n$ FIPS     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ OBEREG   &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5…\n$ CHFNM    &lt;chr&gt; \"Dr. Daniel K. Wims\", \"Ray L. Watts\", \"Michael C.Turner\", \"Ch…\n$ CHFTITLE &lt;chr&gt; \"President\", \"President\", \"President\", \"President\", \"Presiden…\n$ GENTELE  &lt;dbl&gt; 2.563725e+09, 2.059344e+09, 3.343874e+13, 2.568246e+09, 3.342…\n$ EIN      &lt;chr&gt; \"636001109\", \"636005396\", \"237034324\", \"630520830\", \"63600110…\n$ UEIS     &lt;chr&gt; \"JDVGS67MSLH7\", \"YND4PLMC9AN7\", \"RB27R4GLDKE7\", \"HB6KNGVNJRU1…\n$ OPEID    &lt;chr&gt; \"00100200\", \"00105200\", \"02503400\", \"00105500\", \"00100500\", \"…\n$ OPEFLAG  &lt;dbl&gt; 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ WEBADDR  &lt;chr&gt; \"www.aamu.edu/\", \"https://www.uab.edu/\", \"https://www.amridge…\n$ ADMINURL &lt;chr&gt; \"https://www.aamu.edu/admissions-aid/index.html\", \"https://ww…\n$ FAIDURL  &lt;chr&gt; \"https://www.aamu.edu/admissions-aid/financial-aid/\", \"https:…\n$ APPLURL  &lt;chr&gt; \"https://www.aamu.edu/admissions-aid/undergraduate-admissions…\n$ NPRICURL &lt;chr&gt; \"www.aamu.edu/admissions-aid/tuition-fees/net-price-calculato…\n$ VETURL   &lt;chr&gt; NA, \"https://www.uab.edu/students/veterans\", \"https://www.amr…\n$ ATHURL   &lt;chr&gt; NA, \"https://www.uab.edu/registrar/students\", NA, \"www.uah.ed…\n$ DISAURL  &lt;chr&gt; \"https://www.aamu.edu/administrativeoffices/VADS/Pages/Disabi…\n$ SECTOR   &lt;dbl&gt; 1, 1, 2, 1, 1, 0, 1, 4, 1, 1, 1, 2, 4, 3, 4, 4, 2, 4, 9, 4, 4…\n$ ICLEVEL  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 3, 2, 2…\n$ CONTROL  &lt;dbl&gt; 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 1, 3, 1, 1…\n$ HLOFFER  &lt;dbl&gt; 9, 9, 9, 9, 9, 9, 9, 3, 7, 9, 9, 5, 3, 9, 3, 3, 9, 3, 2, 3, 3…\n$ UGOFFER  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ GROFFER  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2…\n$ HDEGOFR1 &lt;dbl&gt; 12, 11, 12, 11, 11, 11, 11, 40, 20, 11, 11, 30, 40, 13, 40, 4…\n$ DEGGRANT &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1…\n$ HBCU     &lt;dbl&gt; 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2…\n$ HOSPITAL &lt;dbl&gt; 2, 1, 2, 2, 2, -2, 2, -2, 2, 2, 2, 2, -2, 2, -2, -2, 2, -2, -…\n$ MEDICAL  &lt;dbl&gt; 2, 1, 2, 2, 2, -2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ TRIBAL   &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ LOCALE   &lt;dbl&gt; 12, 12, 12, 12, 12, 13, 13, 32, 31, 12, 13, 12, 41, 12, 32, 3…\n$ OPENPUBL &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ ACT      &lt;chr&gt; \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"…\n$ NEWID    &lt;dbl&gt; -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -…\n$ DEATHYR  &lt;dbl&gt; -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -…\n$ CLOSEDAT &lt;chr&gt; \"-2\", \"-2\", \"-2\", \"-2\", \"-2\", \"-2\", \"-2\", \"-2\", \"-2\", \"-2\", \"…\n$ CYACTIVE &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ POSTSEC  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ PSEFLAG  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ PSET4FLG &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ RPTMTH   &lt;dbl&gt; 1, 1, 1, 1, 1, -2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, …\n$ INSTCAT  &lt;dbl&gt; 2, 2, 2, 2, 2, -2, 2, 4, 2, 2, 2, 2, 4, 2, 4, 4, 2, 4, 6, 4, …\n$ C21BASIC &lt;dbl&gt; 18, 15, 20, 15, 17, -2, 15, 5, 22, 18, 15, 21, 4, 22, 2, 4, 1…\n$ C21IPUG  &lt;dbl&gt; 16, 14, 20, 17, 13, -2, 17, 2, 16, 16, 17, 9, 2, 20, 1, 2, 19…\n$ C21IPGRD &lt;dbl&gt; 18, 14, 18, 17, 18, -2, 15, 0, 6, 4, 14, 0, 0, 7, 0, 0, 16, 0…\n$ C21UGPRF &lt;dbl&gt; 10, 9, 5, 15, 10, -2, 12, 1, 5, 7, 14, 12, 2, 7, 2, 2, 7, 2, …\n$ C21ENPRF &lt;dbl&gt; 4, 5, 6, 4, 3, -2, 4, 1, 3, 4, 4, 2, 1, 4, 1, 1, 5, 1, -2, 1,…\n$ C21SZSET &lt;dbl&gt; 14, 15, 6, 13, 14, -2, 16, 2, 9, 13, 15, 11, 2, 6, 2, 3, 10, …\n$ C18BASIC &lt;dbl&gt; 18, 15, 20, 16, 19, -2, 15, 2, 22, 18, 15, 21, 1, 20, 5, 5, 1…\n$ C15BASIC &lt;dbl&gt; 18, 15, 20, 16, 19, -2, 16, 1, 22, 18, 16, 21, 1, 22, 8, 1, 2…\n$ CCBASIC  &lt;dbl&gt; 18, 15, 21, 15, 18, -2, 16, 2, 22, 18, 16, 21, 2, 23, 2, 5, 2…\n$ CARNEGIE &lt;dbl&gt; 16, 15, 51, 16, 21, -2, 15, 40, 32, 21, 15, 31, 40, 40, 40, 4…\n$ LANDGRNT &lt;dbl&gt; 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ INSTSIZE &lt;dbl&gt; 3, 5, 1, 3, 2, -2, 5, 2, 2, 3, 5, 1, 2, 1, 2, 3, 2, 2, 1, 2, …\n$ F1SYSTYP &lt;dbl&gt; 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1…\n$ F1SYSNAM &lt;chr&gt; \"-2\", \"The University of Alabama System\", \"-2\", \"The Universi…\n$ F1SYSCOD &lt;dbl&gt; -2, 101050, -2, 101050, -2, 101050, 101050, 101030, -2, 10104…\n$ CBSA     &lt;dbl&gt; 26620, 13820, 33860, 26620, 33860, 46220, 46220, 10760, 26620…\n$ CBSATYPE &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2…\n$ CSA      &lt;dbl&gt; 290, 142, 388, 290, 388, -2, -2, 388, 290, 388, 194, 142, 194…\n$ COUNTYCD &lt;dbl&gt; 1089, 1073, 1101, 1089, 1101, 1125, 1125, 1123, 1083, 1101, 1…\n$ COUNTYNM &lt;chr&gt; \"Madison County\", \"Jefferson County\", \"Montgomery County\", \"M…\n$ CNGDSTCD &lt;dbl&gt; 105, 107, 102, 105, 107, 107, 107, 103, 105, 102, 103, 107, 1…\n$ LONGITUD &lt;dbl&gt; -86.56850, -86.79935, -86.17401, -86.64045, -86.29568, -87.52…\n$ LATITUDE &lt;dbl&gt; 34.78337, 33.50570, 32.36261, 34.72456, 32.36432, 33.20701, 3…\n$ DFRCGID  &lt;dbl&gt; 107, 92, 125, 92, 98, -2, 91, 73, 134, 107, 91, 132, 70, 199,…\n$ DFRCUSCG &lt;dbl&gt; 1, 1, 2, 2, 1, -2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, …\n\n\nThat’s a lot of data! Since we’re not using all of the variables, let’s use select to pull out a subset of them. We’ll use the select() function to do this.\n\n\n\n\n\n\nImportant\n\n\n\nThis is an important place to teach an R technique that makes code much easier and cleaner to write. If you look at the documentation for different functions, you’ll note that typically, the first parameter of a function is a data object to use.\nIf we have several things we need to do with a data object, we could end up writing the name of the data object over, and over, and over, cluttering up our code.\nR uses a special character sequence |&gt;, called the pipe, that takes the output of one command and uses it as the following command. (Some older documentation uses the sequence %&gt;%, which also works, but |&gt; is now preferred.)\n\n\n\ninstitutions &lt;- institutions |&gt;\n    select(UNITID, INSTNM, OPEID, STABBR, SECTOR, HLOFFER)\n\nglimpse(institutions)\n\nRows: 6,256\nColumns: 6\n$ UNITID  &lt;dbl&gt; 100654, 100663, 100690, 100706, 100724, 100733, 100751, 100760…\n$ INSTNM  &lt;chr&gt; \"Alabama A & M University\", \"University of Alabama at Birmingh…\n$ OPEID   &lt;chr&gt; \"00100200\", \"00105200\", \"02503400\", \"00105500\", \"00100500\", \"0…\n$ STABBR  &lt;chr&gt; \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"A…\n$ SECTOR  &lt;dbl&gt; 1, 1, 2, 1, 1, 0, 1, 4, 1, 1, 1, 2, 4, 3, 4, 4, 2, 4, 9, 4, 4,…\n$ HLOFFER &lt;dbl&gt; 9, 9, 9, 9, 9, 9, 9, 3, 7, 9, 9, 5, 3, 9, 3, 3, 9, 3, 2, 3, 3,…\n\n\nLet’s move on to importing and cleaning the IPEDS Completions data. We’ll again use read_csv() to read in the data and store it in an object called completions. Since we’re familiar with the completions data, we know that we really only need major #1 and can filter out secondary majors. We will ask filter() to keep only those rows equal to 1 (== 1). Finally, similar to above, we only care about a few of the variables for now.\n\ncompletions &lt;- read_csv(\n    str_c(\"C\", IPEDS_year, \"_A.zip\")\n    ) |&gt;\n    filter(MAJORNUM == 1) |&gt;\n    select(UNITID, CIPCODE, AWLEVEL, CTOTALT)\n\nRows: 300877 Columns: 64\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (32): CIPCODE, AWLEVEL, XCTOTALT, XCTOTALM, XCTOTALW, XCAIANT, XCAIANM, ...\ndbl (32): UNITID, MAJORNUM, CTOTALT, CTOTALM, CTOTALW, CAIANT, CAIANM, CAIAN...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(completions)\n\nRows: 279,506\nColumns: 4\n$ UNITID  &lt;dbl&gt; 100654, 100654, 100654, 100654, 100654, 100654, 100654, 100654…\n$ CIPCODE &lt;chr&gt; \"01.0999\", \"01.1001\", \"01.1001\", \"01.1001\", \"01.9999\", \"01.999…\n$ AWLEVEL &lt;chr&gt; \"05\", \"05\", \"07\", \"17\", \"05\", \"07\", \"17\", \"05\", \"05\", \"07\", \"0…\n$ CTOTALT &lt;dbl&gt; 9, 7, 7, 3, 1, 8, 3, 8, 3, 12, 11, 17, 41, 16, 0, 1, 3, 1, 8, …\n\n\nNow that we have clean directory info (institutions) and clean completions data (completions), let’s combine them. We’ll use the *_join() functions from the tidyverse dplyr package. This is like joining tables in SQL, or for those of you who use Excel like databases, like using VLOOKUP().\nWe’ll store this combined dataset as combined for now. We need to provide the two data objects we’re joining, and the variable(s) we want to join on:\n\ncombined &lt;- left_join(\n    institutions,\n    completions,\n    by = \"UNITID\",\n    keep = TRUE\n)\n\nglimpse(combined)\n\nRows: 279,720\nColumns: 10\n$ UNITID.x &lt;dbl&gt; 100654, 100654, 100654, 100654, 100654, 100654, 100654, 10065…\n$ INSTNM   &lt;chr&gt; \"Alabama A & M University\", \"Alabama A & M University\", \"Alab…\n$ OPEID    &lt;chr&gt; \"00100200\", \"00100200\", \"00100200\", \"00100200\", \"00100200\", \"…\n$ STABBR   &lt;chr&gt; \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"…\n$ SECTOR   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ HLOFFER  &lt;dbl&gt; 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9…\n$ UNITID.y &lt;dbl&gt; 100654, 100654, 100654, 100654, 100654, 100654, 100654, 10065…\n$ CIPCODE  &lt;chr&gt; \"01.0999\", \"01.1001\", \"01.1001\", \"01.1001\", \"01.9999\", \"01.99…\n$ AWLEVEL  &lt;chr&gt; \"05\", \"05\", \"07\", \"17\", \"05\", \"07\", \"17\", \"05\", \"05\", \"07\", \"…\n$ CTOTALT  &lt;dbl&gt; 9, 7, 7, 3, 1, 8, 3, 8, 3, 12, 11, 17, 41, 16, 0, 1, 3, 1, 8,…\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that when we get to more complex functions that would create really long lines of code or nested functions, it’s best to separate your code into multiple lines to keep it readable. R will ignore the line breaks that you create just like it ignores spaces.\n\n\nThe data set is combined and clean, but since it has a row for every credential (or at least unique combinations of level and CIP code) for every institution, it’s pretty large. We’ll work with Ohio data so we can filter again to Ohio institutions:\n\ncombined &lt;- combined |&gt;\n    filter(STABBR == \"OH\")\n\nglimpse(combined)\n\nRows: 12,521\nColumns: 10\n$ UNITID.x &lt;dbl&gt; 200590, 200590, 200590, 200590, 200590, 200590, 200590, 20059…\n$ INSTNM   &lt;chr&gt; \"ETI Technical College\", \"ETI Technical College\", \"ETI Techni…\n$ OPEID    &lt;chr&gt; \"03079000\", \"03079000\", \"03079000\", \"03079000\", \"03079000\", \"…\n$ STABBR   &lt;chr&gt; \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"…\n$ SECTOR   &lt;dbl&gt; 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ HLOFFER  &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9…\n$ UNITID.y &lt;dbl&gt; 200590, 200590, 200590, 200590, 200590, 200590, 200590, 20059…\n$ CIPCODE  &lt;chr&gt; \"22.0301\", \"46.0401\", \"48.0508\", \"51.0801\", \"51.0801\", \"51.38…\n$ AWLEVEL  &lt;chr&gt; \"03\", \"02\", \"02\", \"02\", \"03\", \"03\", \"02\", \"02\", \"03\", \"02\", \"…\n$ CTOTALT  &lt;dbl&gt; 2, 7, 10, 11, 0, 15, 9, 0, 2, 37, 19, 9, 2, 10, 2, 39, 10, 10…\n\n\nMuch better. But we have two more steps we’d like to do. Note that many of the variables are repeated in the dataset. We can use a special data type, factors, to clean up this data into categorical variables. tidyverse includes a package, forcats, to help with working with categorical data using the factor data type. Let’s do this for SECTOR, AWLEVEL, and CTOTALT:\n\ncombined &lt;- combined |&gt;\n    mutate(\n        SECTOR = as_factor(SECTOR),\n        HLOFFER = as_factor(HLOFFER),\n        AWLEVEL = as_factor(AWLEVEL)\n    )\n\nglimpse(combined)\n\nRows: 12,521\nColumns: 10\n$ UNITID.x &lt;dbl&gt; 200590, 200590, 200590, 200590, 200590, 200590, 200590, 20059…\n$ INSTNM   &lt;chr&gt; \"ETI Technical College\", \"ETI Technical College\", \"ETI Techni…\n$ OPEID    &lt;chr&gt; \"03079000\", \"03079000\", \"03079000\", \"03079000\", \"03079000\", \"…\n$ STABBR   &lt;chr&gt; \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"OH\", \"…\n$ SECTOR   &lt;fct&gt; 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ HLOFFER  &lt;fct&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9…\n$ UNITID.y &lt;dbl&gt; 200590, 200590, 200590, 200590, 200590, 200590, 200590, 20059…\n$ CIPCODE  &lt;chr&gt; \"22.0301\", \"46.0401\", \"48.0508\", \"51.0801\", \"51.0801\", \"51.38…\n$ AWLEVEL  &lt;fct&gt; 03, 02, 02, 02, 03, 03, 02, 02, 03, 02, 03, 07, 17, 07, 06, 0…\n$ CTOTALT  &lt;dbl&gt; 2, 7, 10, 11, 0, 15, 9, 0, 2, 37, 19, 9, 2, 10, 2, 39, 10, 10…\n\n\nLastly, since we want to use the SECTOR variable in particular later, let’s provide it with desciptions that are used in IPEDS:2\n\ncombined &lt;- combined |&gt;\n    mutate(\n        SECTOR = fct_recode(\n            SECTOR,\n            \"Administrative Unit\" = \"0\",\n            \"Public 4-year or above\" = \"1\",\n            \"Private nonprofit 4-year or above\" = \"2\",\n            \"Private for-profit 4-year or above\" = \"3\",\n            \"Public 2-year\" = \"4\",\n            \"Private nonprofit 2-year\" = \"5\",\n            \"Private for-profit 2-year\" = \"6\",\n            \"Public less-than-2-year\" = \"7\",\n            \"Private nonprofit less-than-2-year\" = \"8\",\n            \"Private for-profit less-than-2-year\" = \"9\"\n        )\n    )\n\n\n\n\n\n\n\nNote\n\n\n\nOnce you’re comfortable with many of these cleaning steps, you can revisit the readr function options. You can actually change column types, select variables, etc. all with optional arguments.\n\n\n\nDataset #1 complete code\n\n# load libraries\nlibrary(\"tidyverse\")\nlibrary(\"curl\")\n\n# store IPEDS url & data year for use\nIPEDS_url &lt;- \"https://nces.ed.gov/ipeds/datacenter/data/\"\nIPEDS_year &lt;- 2022\n\n# download data\ncurl_download(\n  str_c(IPEDS_url, \"HD\", IPEDS_year, \".zip\"),\n  destfile = str_c(\"HD\", IPEDS_year, \".zip\")\n)\n\ncurl_download(\n  str_c(IPEDS_url, \"C\", IPEDS_year, \"_A\", \".zip\"),\n  destfile = str_c(\"C\", IPEDS_year, \"_A\", \".zip\")\n)\n\n# process institution directory information\ninstitutions &lt;- read_csv(\n    str_c(\"HD\", IPEDS_year, \".zip\")\n    ) |&gt;\n    select(UNITID, INSTNM, OPEID, STABBR, SECTOR, HLOFFER)\n\n# process completions data\ncompletions &lt;- read_csv(\n    str_c(\"C\", IPEDS_year, \"_A.zip\")\n    ) |&gt;\n    filter(MAJORNUM == 1) |&gt;\n    select(UNITID, CIPCODE, AWLEVEL, CTOTALT)\n\n# combine datasets, additional cleaning\ncombined &lt;- left_join(\n    institutions,\n    completions,\n    by = \"UNITID\",\n    keep = TRUE\n    ) |&gt;\n    filter(STABBR == \"OH\") |&gt; #filter to Ohio\n    mutate(\n        SECTOR = as_factor(SECTOR),\n        HLOFFER = as_factor(HLOFFER),\n        AWLEVEL = as_factor(AWLEVEL)\n    ) |&gt;\n    mutate(\n        SECTOR = fct_recode(\n            SECTOR,\n            \"Administrative Unit\" = \"0\",\n            \"Public 4-year or above\" = \"1\",\n            \"Private nonprofit 4-year or above\" = \"2\",\n            \"Private for-profit 4-year or above\" = \"3\",\n            \"Public 2-year\" = \"4\",\n            \"Private nonprofit 2-year\" = \"5\",\n            \"Private for-profit 2-year\" = \"6\",\n            \"Public less-than-2-year\" = \"7\",\n            \"Private nonprofit less-than-2-year\" = \"8\",\n            \"Private for-profit less-than-2-year\" = \"9\"\n        )\n    )"
  },
  {
    "objectID": "workingwithdata.html#sec-dataset2",
    "href": "workingwithdata.html#sec-dataset2",
    "title": "2  Importing and cleaning data",
    "section": "2.5 In Practice: Dataset #2 – Occupation Projections data",
    "text": "2.5 In Practice: Dataset #2 – Occupation Projections data\nFor our second example dataset, we’ll work with Occupational Projections data from the Ohio Department of Jobs and Family Services, Bureau of Labor Market Information. The Long-Term Projections data by JobsOhio region and Metropolitan Statistical Area (MSA) can be found at https://ohiolmi.com/Home/Projections/ProjectionsHome_08.16.23. As interest in post-graduate outcomes increases throughout higher education, institutional researchers are increasingly working with labor market data.\nWe’ll begin with the Central Ohio Excel file. If you copy the URL, you’ll get ,https://ohiolmi.com/_docs/PROJ/JobsOhio/Central.xlsx.\n\n\n\n\n\n\nNote\n\n\n\nIf you hover over the file links, you’ll notice that they share a common URL stem (https://ohiolmi.com/_docs/PROJ/JobsOhio/), which will be helpful to use in parameterized reports, covered in Chapter 4.\n\n\nLet’s store that URL to make it easier to use:\n\nprojections_url &lt;- \"https://ohiolmi.com/_docs/PROJ/JobsOhio/Central.xlsx\"\n\nWe’ll pull down the file with curl:\n\ncurl_download(projections_url, \"projectionsdata.xlsx\")\n\nNext we’ll try to import the file as a data object, and then check the results with summary() and glimpse():\n\nprojections_data &lt;- read_xlsx(\"projectionsdata.xlsx\")\n\nNew names:\n• `` -&gt; `...2`\n• `` -&gt; `...3`\n• `` -&gt; `...4`\n• `` -&gt; `...5`\n• `` -&gt; `...6`\n• `` -&gt; `...7`\n• `` -&gt; `...8`\n• `` -&gt; `...9`\n• `` -&gt; `...10`\n• `` -&gt; `...11`\n• `` -&gt; `...12`\n\nglimpse(projections_data)\n\nRows: 501\nColumns: 12\n$ `JobsOhio Regional Network - Central Region` &lt;chr&gt; \"Occupational* Employment…\n$ ...2                                         &lt;chr&gt; NA, NA, NA, NA, \"Occupati…\n$ ...3                                         &lt;chr&gt; NA, NA, \"Employment*\", \"2…\n$ ...4                                         &lt;chr&gt; NA, NA, NA, \"2030\", \"Proj…\n$ ...5                                         &lt;chr&gt; NA, NA, \"Change in\", \"Emp…\n$ ...6                                         &lt;chr&gt; NA, NA, NA, NA, \"Percent\"…\n$ ...7                                         &lt;chr&gt; NA, NA, NA, \"Annual Openi…\n$ ...8                                         &lt;chr&gt; NA, NA, NA, NA, \"Exits\", …\n$ ...9                                         &lt;chr&gt; NA, NA, NA, NA, \"Transfer…\n$ ...10                                        &lt;chr&gt; NA, NA, NA, NA, \"Total\", …\n$ ...11                                        &lt;chr&gt; NA, NA, NA, \"Median Wage\"…\n$ ...12                                        &lt;chr&gt; NA, NA, NA, NA, NA, NA, N…\n\nsummary(projections_data)\n\n JobsOhio Regional Network - Central Region     ...2          \n Length:501                                 Length:501        \n Class :character                           Class :character  \n Mode  :character                           Mode  :character  \n     ...3               ...4               ...5               ...6          \n Length:501         Length:501         Length:501         Length:501        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n     ...7               ...8               ...9              ...10          \n Length:501         Length:501         Length:501         Length:501        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n    ...11              ...12          \n Length:501         Length:501        \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n\n\nThat returned a bunch of junk, because there are multiple header rows in the file. Luckily, there’s an optional parameter we can add to read_xlsx to skip to the line we want (line 6 has the headers we want), which we can read about in the readxl documentation.\n\nprojections_data &lt;- read_xlsx(\"projectionsdata.xlsx\", skip = 5)\n\nNew names:\n• `` -&gt; `...12`\n\nglimpse(projections_data)\n\nRows: 496\nColumns: 12\n$ Code                 &lt;chr&gt; \"00-0000\", \"11-0000\", \"11-1011\", \"11-1021\", \"11-1…\n$ `Occupational Title` &lt;chr&gt; \"Total, All Occupations\", \"Management Occupations…\n$ Annual               &lt;chr&gt; \"1168921\", \"70397\", \"1830\", \"14405\", \"336\", \"1777…\n$ Projected            &lt;dbl&gt; 1261966, 77059, 1671, 15779, 372, 1869, 2668, 413…\n$ `2020-2030`          &lt;dbl&gt; 93045, 6662, -159, 1374, 36, 92, 131, 37, 252, 10…\n$ Percent              &lt;dbl&gt; 0.0796, 0.0946, -0.0869, 0.0954, 0.1071, 0.0518, …\n$ Growth               &lt;dbl&gt; 9304, 666, -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, …\n$ Exits                &lt;dbl&gt; 50873, 2143, 48, 301, 8, 36, 52, 10, 86, 54, 122,…\n$ Transfers            &lt;dbl&gt; 79184, 3818, 71, 936, 17, 115, 164, 22, 151, 188,…\n$ Total                &lt;dbl&gt; 139361, 6627, 103, 1374, 29, 160, 229, 36, 262, 2…\n$ `May 2021`           &lt;chr&gt; \"22.4\", \"48.2\", \"80.739999999999995\", \"47.63\", \"3…\n$ ...12                &lt;chr&gt; NA, NA, NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, N…\n\nsummary(projections_data)\n\n     Code           Occupational Title    Annual            Projected      \n Length:496         Length:496         Length:496         Min.   :    104  \n Class :character   Class :character   Class :character   1st Qu.:    400  \n Mode  :character   Mode  :character   Mode  :character   Median :    976  \n                                                          Mean   :   7667  \n                                                          3rd Qu.:   2903  \n                                                          Max.   :1261966  \n                                                          NA's   :8        \n   2020-2030          Percent             Growth            Exits        \n Min.   :-1975.0   Min.   :-0.35860   Min.   :-198.00   Min.   :    2.0  \n 1st Qu.:    6.0   1st Qu.: 0.01740   1st Qu.:   1.00   1st Qu.:   12.0  \n Median :   53.0   Median : 0.06970   Median :   5.00   Median :   34.5  \n Mean   :  566.1   Mean   : 0.07336   Mean   :  56.61   Mean   :  309.3  \n 3rd Qu.:  216.2   3rd Qu.: 0.12575   3rd Qu.:  22.00   3rd Qu.:  101.2  \n Max.   :93045.0   Max.   : 0.58880   Max.   :9304.00   Max.   :50873.0  \n NA's   :8         NA's   :8          NA's   :8         NA's   :8        \n   Transfers           Total            May 2021            ...12          \n Min.   :    1.0   Min.   :     5.0   Length:496         Length:496        \n 1st Qu.:   21.0   1st Qu.:    37.0   Class :character   Class :character  \n Median :   57.5   Median :    95.5   Mode  :character   Mode  :character  \n Mean   :  481.4   Mean   :   847.3                                        \n 3rd Qu.:  179.8   3rd Qu.:   301.8                                        \n Max.   :79184.0   Max.   :139361.0                                        \n NA's   :8         NA's   :8                                               \n\n\nIt seems we have a little more data cleaning to do. We need to change the types of a few columns3, rename a few columns, and do some filtering to remove the summary occupations. Let’s use additional parameters in read_xlsx to define types and column names. By providing the column names instead of importing them, we need to change the skip = option to 6 instead of 5.\n\n\n\n\n\n\nNote\n\n\n\nThere’s often more than one way to do something. Instead of providing column names on the import (and changing the skip parameter), we could rename the columns with the rename() function after import.\n\n\n\nprojections_data &lt;- read_xlsx(\n    \"projectionsdata.xlsx\",\n    skip = 6,\n    col_names = c(\n        \"SOC\",\n        \"Occupation\",\n        \"Current_jobs\",\n        \"Projected_jobs\",\n        \"Change_num\",\n        \"Change_pct\",\n        \"Growth\",\n        \"Exits\",\n        \"Transfers\",\n        \"Tot_openings\",\n        \"Wage\",\n        \"Notes\"\n    ),\n    col_types = c(\n        \"text\",\n        \"text\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"text\"\n    )\n)\n\nglimpse(projections_data)\n\nRows: 496\nColumns: 12\n$ SOC            &lt;chr&gt; \"00-0000\", \"11-0000\", \"11-1011\", \"11-1021\", \"11-1031\", …\n$ Occupation     &lt;chr&gt; \"Total, All Occupations\", \"Management Occupations\", \"Ch…\n$ Current_jobs   &lt;dbl&gt; 1168921, 70397, 1830, 14405, 336, 1777, 2537, 376, 2900…\n$ Projected_jobs &lt;dbl&gt; 1261966, 77059, 1671, 15779, 372, 1869, 2668, 413, 3152…\n$ Change_num     &lt;dbl&gt; 93045, 6662, -159, 1374, 36, 92, 131, 37, 252, 103, 965…\n$ Change_pct     &lt;dbl&gt; 0.0796, 0.0946, -0.0869, 0.0954, 0.1071, 0.0518, 0.0516…\n$ Growth         &lt;dbl&gt; 9304, 666, -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, 3, 23,…\n$ Exits          &lt;dbl&gt; 50873, 2143, 48, 301, 8, 36, 52, 10, 86, 54, 122, 27, 1…\n$ Transfers      &lt;dbl&gt; 79184, 3818, 71, 936, 17, 115, 164, 22, 151, 188, 298, …\n$ Tot_openings   &lt;dbl&gt; 139361, 6627, 103, 1374, 29, 160, 229, 36, 262, 252, 51…\n$ Wage           &lt;dbl&gt; 22.40, 48.20, 80.74, 47.63, 37738.00, 62.05, 61.39, 57.…\n$ Notes          &lt;chr&gt; NA, NA, NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, NA, NA,…\n\nsummary(projections_data)\n\n     SOC             Occupation         Current_jobs       Projected_jobs   \n Length:496         Length:496         Min.   :    102.0   Min.   :    104  \n Class :character   Class :character   1st Qu.:    397.5   1st Qu.:    400  \n Mode  :character   Mode  :character   Median :    937.5   Median :    976  \n                                       Mean   :   7101.0   Mean   :   7667  \n                                       3rd Qu.:   2729.0   3rd Qu.:   2903  \n                                       Max.   :1168921.0   Max.   :1261966  \n                                       NA's   :8           NA's   :8        \n   Change_num        Change_pct           Growth            Exits        \n Min.   :-1975.0   Min.   :-0.35860   Min.   :-198.00   Min.   :    2.0  \n 1st Qu.:    6.0   1st Qu.: 0.01740   1st Qu.:   1.00   1st Qu.:   12.0  \n Median :   53.0   Median : 0.06970   Median :   5.00   Median :   34.5  \n Mean   :  566.1   Mean   : 0.07336   Mean   :  56.61   Mean   :  309.3  \n 3rd Qu.:  216.2   3rd Qu.: 0.12575   3rd Qu.:  22.00   3rd Qu.:  101.2  \n Max.   :93045.0   Max.   : 0.58880   Max.   :9304.00   Max.   :50873.0  \n NA's   :8         NA's   :8          NA's   :8         NA's   :8        \n   Transfers        Tot_openings           Wage              Notes          \n Min.   :    1.0   Min.   :     5.0   Min.   :    10.04   Length:496        \n 1st Qu.:   21.0   1st Qu.:    37.0   1st Qu.:    18.13   Class :character  \n Median :   57.5   Median :    95.5   Median :    23.53   Mode  :character  \n Mean   :  481.4   Mean   :   847.3   Mean   :  4994.70                     \n 3rd Qu.:  179.8   3rd Qu.:   301.8   3rd Qu.:    37.24                     \n Max.   :79184.0   Max.   :139361.0   Max.   :129451.00                     \n NA's   :8         NA's   :8          NA's   :11                            \n\n\nNext, let’s filter the dataset to remove those summary occupations and any notes at the end.\nSummary occupations are coded with SOC codes ending in “0000”, so we can quickly identify them. In Excel, we’d likely use the MID() or RIGHT() commands to pull out that sequence. In R’s tidyverse package, we can use str_sub(), which works very similar to these, extracting a subset of the string field based on character position. Negative values mean work from the end.\nAny rows with anything other than the SOC code in the SOC column should be ignored. Since SOC codes are 7 characters long, we’ll try to use that. In Excel, we’d use LEN() to get the length, while here we’ll use str_length() from the tidyverse package. Note that in R, equals and not equals (== and !=) are different than in Excel (= and &lt;&gt;)\n\nprojections_data &lt;- projections_data |&gt;\n    filter(\n        str_sub(SOC, -4, -1) != \"0000\",\n        str_length(SOC) == 7\n        )\n\nglimpse(projections_data)\n\nRows: 465\nColumns: 12\n$ SOC            &lt;chr&gt; \"11-1011\", \"11-1021\", \"11-1031\", \"11-2021\", \"11-2022\", …\n$ Occupation     &lt;chr&gt; \"Chief Executives\", \"General and Operations Managers\", …\n$ Current_jobs   &lt;dbl&gt; 1830, 14405, 336, 1777, 2537, 376, 2900, 3250, 5457, 13…\n$ Projected_jobs &lt;dbl&gt; 1671, 15779, 372, 1869, 2668, 413, 3152, 3353, 6422, 14…\n$ Change_num     &lt;dbl&gt; -159, 1374, 36, 92, 131, 37, 252, 103, 965, 87, 29, 228…\n$ Change_pct     &lt;dbl&gt; -0.0869, 0.0954, 0.1071, 0.0518, 0.0516, 0.0984, 0.0869…\n$ Growth         &lt;dbl&gt; -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, 3, 23, 0, 8, 3, 5…\n$ Exits          &lt;dbl&gt; 48, 301, 8, 36, 52, 10, 86, 54, 122, 27, 10, 30, 3, 24,…\n$ Transfers      &lt;dbl&gt; 71, 936, 17, 115, 164, 22, 151, 188, 298, 67, 24, 86, 8…\n$ Tot_openings   &lt;dbl&gt; 103, 1374, 29, 160, 229, 36, 262, 252, 516, 103, 37, 13…\n$ Wage           &lt;dbl&gt; 80.74, 47.63, 37738.00, 62.05, 61.39, 57.62, 47.73, 63.…\n$ Notes          &lt;chr&gt; NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, NA, NA, NA, NA,…\n\nsummary(projections_data)\n\n     SOC             Occupation         Current_jobs   Projected_jobs \n Length:465         Length:465         Min.   :  102   Min.   :  104  \n Class :character   Class :character   1st Qu.:  376   1st Qu.:  395  \n Mode  :character   Mode  :character   Median :  841   Median :  902  \n                                       Mean   : 2425   Mean   : 2618  \n                                       3rd Qu.: 2296   3rd Qu.: 2583  \n                                       Max.   :34936   Max.   :39662  \n                                                                      \n   Change_num        Change_pct           Growth            Exits       \n Min.   :-1948.0   Min.   :-0.35860   Min.   :-195.00   Min.   :   2.0  \n 1st Qu.:    5.0   1st Qu.: 0.01650   1st Qu.:   0.00   1st Qu.:  12.0  \n Median :   44.0   Median : 0.06850   Median :   4.00   Median :  30.0  \n Mean   :  193.9   Mean   : 0.07258   Mean   :  19.39   Mean   : 105.8  \n 3rd Qu.:  185.0   3rd Qu.: 0.12710   3rd Qu.:  18.00   3rd Qu.:  82.0  \n Max.   : 8608.0   Max.   : 0.58880   Max.   : 861.00   Max.   :2775.0  \n                                                                        \n   Transfers       Tot_openings         Wage              Notes          \n Min.   :   1.0   Min.   :   5.0   Min.   :    10.04   Length:465        \n 1st Qu.:  21.0   1st Qu.:  36.0   1st Qu.:    18.13   Class :character  \n Median :  52.0   Median :  87.0   Median :    23.60   Mode  :character  \n Mean   : 164.6   Mean   : 289.8   Mean   :  5242.13                     \n 3rd Qu.: 143.0   3rd Qu.: 231.0   3rd Qu.:    37.30                     \n Max.   :3245.0   Max.   :6071.0   Max.   :129451.00                     \n                                   NA's   :3                             \n\n\nAnd finally, we need to adjust the wage column. It seems that there is a mix of hourly and annual wage figures in this column. Let’s convert all of them to annual wages as a new variable, by multiplying any values below $200/hr by 2,080 hours/yr. We’ll do this by using mutate() to create the new variable, and define it using a case_when().4\n\nprojections_data &lt;- projections_data |&gt;\n    mutate(\n        annual_wage = case_when(\n            Wage &lt; 200 ~ Wage * 2080,\n            .default = Wage\n        )\n    )\n\nglimpse(projections_data)\n\nRows: 465\nColumns: 13\n$ SOC            &lt;chr&gt; \"11-1011\", \"11-1021\", \"11-1031\", \"11-2021\", \"11-2022\", …\n$ Occupation     &lt;chr&gt; \"Chief Executives\", \"General and Operations Managers\", …\n$ Current_jobs   &lt;dbl&gt; 1830, 14405, 336, 1777, 2537, 376, 2900, 3250, 5457, 13…\n$ Projected_jobs &lt;dbl&gt; 1671, 15779, 372, 1869, 2668, 413, 3152, 3353, 6422, 14…\n$ Change_num     &lt;dbl&gt; -159, 1374, 36, 92, 131, 37, 252, 103, 965, 87, 29, 228…\n$ Change_pct     &lt;dbl&gt; -0.0869, 0.0954, 0.1071, 0.0518, 0.0516, 0.0984, 0.0869…\n$ Growth         &lt;dbl&gt; -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, 3, 23, 0, 8, 3, 5…\n$ Exits          &lt;dbl&gt; 48, 301, 8, 36, 52, 10, 86, 54, 122, 27, 10, 30, 3, 24,…\n$ Transfers      &lt;dbl&gt; 71, 936, 17, 115, 164, 22, 151, 188, 298, 67, 24, 86, 8…\n$ Tot_openings   &lt;dbl&gt; 103, 1374, 29, 160, 229, 36, 262, 252, 516, 103, 37, 13…\n$ Wage           &lt;dbl&gt; 80.74, 47.63, 37738.00, 62.05, 61.39, 57.62, 47.73, 63.…\n$ Notes          &lt;chr&gt; NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, NA, NA, NA, NA,…\n$ annual_wage    &lt;dbl&gt; 167939.2, 99070.4, 37738.0, 129064.0, 127691.2, 119849.…\n\nsummary(projections_data)\n\n     SOC             Occupation         Current_jobs   Projected_jobs \n Length:465         Length:465         Min.   :  102   Min.   :  104  \n Class :character   Class :character   1st Qu.:  376   1st Qu.:  395  \n Mode  :character   Mode  :character   Median :  841   Median :  902  \n                                       Mean   : 2425   Mean   : 2618  \n                                       3rd Qu.: 2296   3rd Qu.: 2583  \n                                       Max.   :34936   Max.   :39662  \n                                                                      \n   Change_num        Change_pct           Growth            Exits       \n Min.   :-1948.0   Min.   :-0.35860   Min.   :-195.00   Min.   :   2.0  \n 1st Qu.:    5.0   1st Qu.: 0.01650   1st Qu.:   0.00   1st Qu.:  12.0  \n Median :   44.0   Median : 0.06850   Median :   4.00   Median :  30.0  \n Mean   :  193.9   Mean   : 0.07258   Mean   :  19.39   Mean   : 105.8  \n 3rd Qu.:  185.0   3rd Qu.: 0.12710   3rd Qu.:  18.00   3rd Qu.:  82.0  \n Max.   : 8608.0   Max.   : 0.58880   Max.   : 861.00   Max.   :2775.0  \n                                                                        \n   Transfers       Tot_openings         Wage              Notes          \n Min.   :   1.0   Min.   :   5.0   Min.   :    10.04   Length:465        \n 1st Qu.:  21.0   1st Qu.:  36.0   1st Qu.:    18.13   Class :character  \n Median :  52.0   Median :  87.0   Median :    23.60   Mode  :character  \n Mean   : 164.6   Mean   : 289.8   Mean   :  5242.13                     \n 3rd Qu.: 143.0   3rd Qu.: 231.0   3rd Qu.:    37.30                     \n Max.   :3245.0   Max.   :6071.0   Max.   :129451.00                     \n                                   NA's   :3                             \n  annual_wage    \n Min.   : 20883  \n 1st Qu.: 37710  \n Median : 48776  \n Mean   : 57792  \n 3rd Qu.: 75712  \n Max.   :179150  \n NA's   :3       \n\n\nAnd now we have a clean dataset! We’ll use this further in Chapter 3 and Chapter 4, so let’s show what it looks like all together.\n\nDataset #2 complete code\n\n# load libraries\nlibrary(\"readxl\")\nlibrary(\"curl\")\nlibrary(\"tidyverse\")\n\n# define file url\nprojections_url &lt;- \"https://ohiolmi.com/_docs/PROJ/JobsOhio/Central.xlsx\"\n\n# download file\ncurl_download(projections_url, \"projectionsdata.xlsx\")\n\n# read file with approrpiate settings\nprojections_data &lt;- read_xlsx(\n    \"projectionsdata.xlsx\",\n    skip = 6,\n    col_names = c(\n        \"SOC\",\n        \"Occupation\",\n        \"Current_jobs\",\n        \"Projected_jobs\",\n        \"Change_num\",\n        \"Change_pct\",\n        \"Growth\",\n        \"Exits\",\n        \"Transfers\",\n        \"Tot_openings\",\n        \"Wage\",\n        \"Notes\"\n    ),\n    col_types = c(\n        \"text\",\n        \"text\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"text\"\n    )\n    ) |&gt;\n\n    # remove summary occupations and notes/blank rows\n    filter(\n        str_sub(SOC, -4, -1) != \"0000\",\n        str_length(SOC) == 7\n        ) |&gt;\n        \n    # create annual wage column so values are consistent\n    mutate(\n        annual_wage = case_when(\n            Wage &lt; 200 ~ Wage * 2080,\n            .default = Wage\n        )\n    )"
  },
  {
    "objectID": "workingwithdata.html#exercises",
    "href": "workingwithdata.html#exercises",
    "title": "2  Importing and cleaning data",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nThink about the kinds of data that you work with regularly. Is it tidy? How is it stored? What functions will you need to use to work with it in R?\n\n\nExercise 2\nWe used functions from several tidyverse packages. Especially when learning, it’s nice to have quick references. Tidyverse has a series of official cheat sheets that you’ll likely find useful. Take a look:\n\n\n\npackage\nwhat this package is about\nsite\ncheat sheet\n\n\n\n\nreadxl\ndata import (esp. Excel files)\nsite\ncheat sheet\n\n\ndplyr\ndata transformation\nsite\ncheat sheet\n\n\nstringr\nworking with text\nsite\ncheat sheet\n\n\nfactors\ncategorical data\nsite\ncheat sheet"
  },
  {
    "objectID": "workingwithdata.html#extra-exporting-data",
    "href": "workingwithdata.html#extra-exporting-data",
    "title": "2  Importing and cleaning data",
    "section": "Extra: Exporting data",
    "text": "Extra: Exporting data\nAt the start of this chapter we covered importing data - but didn’t cover exporting data. Of course, while this guide will show you how far you can take R, it also can be just one small piece of your toolchain if you wish. You could use R to do some cleaning, processing, and some analysis, and then export the data for use in another tool like a dashboard product.\nThe tidyverse package readr includes a set of write_ functions to export to CSV quickly. write_csv_excel() takes a data object input and a filename (e.g. mydata.csv) and builds out the file which can be read in Excel or other tools.\nWe briefly reviewed accessing a database earlier in this chapter. DBI provides dbWriteTable() to write a data table object as a database table. You must provide the db connection object, a table name, and then the data object you’re storing. It can take an append argument if you want to simply add data to an existing table.\n\n\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686."
  },
  {
    "objectID": "workingwithdata.html#footnotes",
    "href": "workingwithdata.html#footnotes",
    "title": "2  Importing and cleaning data",
    "section": "",
    "text": "Yes, there are a couple packages that are designed for accessing IPEDS data including this one in CRAN and this one on GitHub. But we’re using the files directly from the IPEDS data center because we are focused on learning how to import and clean data.↩︎\nAnd included in the dictionary file or the web interface↩︎\nBy default, the tidyverse read_ functions guess at column types by examining the fields, but it is imperfect.↩︎\ncase_when() is inspired by the SQL CASE statement, and is more elegant than nested IF() functions you may be used to using in Excel.↩︎"
  },
  {
    "objectID": "analysis.html#statistical-analysis",
    "href": "analysis.html#statistical-analysis",
    "title": "3  Statistical analysis & data visualizations",
    "section": "3.1 Statistical analysis",
    "text": "3.1 Statistical analysis\nR was created as a statistics-focused programming language, so it’s important to at least briefly showcase how R can be used to run statistical methods and quickly produce results that can then be visualized, used in reports, and stored for future use. However, institutional researchers come from many different backgrounds, and we don’t want to assume that all IR professionals reading this guide have the same level of knowledge of statistical methods. We’ll keep this section brief, but know that if a method exists, it likely has an implementation in R.\nIn this section we’ll build off of the occupational projections data that we worked with in Section 2.5, which is stored as the R data object projections_data.\n\nDescriptive statistics\nDuring data cleaning, we utilized the summary() function in conjunction with glimpse() to quickly examine a dataset. The summary() function displays basic descriptive statistics about every numeric variable in the dataset:\n\nsummary(projections_data)\n\n     SOC             Occupation         Current_jobs   Projected_jobs \n Length:465         Length:465         Min.   :  102   Min.   :  104  \n Class :character   Class :character   1st Qu.:  376   1st Qu.:  395  \n Mode  :character   Mode  :character   Median :  841   Median :  902  \n                                       Mean   : 2425   Mean   : 2618  \n                                       3rd Qu.: 2296   3rd Qu.: 2583  \n                                       Max.   :34936   Max.   :39662  \n                                                                      \n   Change_num        Change_pct           Growth            Exits       \n Min.   :-1948.0   Min.   :-0.35860   Min.   :-195.00   Min.   :   2.0  \n 1st Qu.:    5.0   1st Qu.: 0.01650   1st Qu.:   0.00   1st Qu.:  12.0  \n Median :   44.0   Median : 0.06850   Median :   4.00   Median :  30.0  \n Mean   :  193.9   Mean   : 0.07258   Mean   :  19.39   Mean   : 105.8  \n 3rd Qu.:  185.0   3rd Qu.: 0.12710   3rd Qu.:  18.00   3rd Qu.:  82.0  \n Max.   : 8608.0   Max.   : 0.58880   Max.   : 861.00   Max.   :2775.0  \n                                                                        \n   Transfers       Tot_openings         Wage              Notes          \n Min.   :   1.0   Min.   :   5.0   Min.   :    10.04   Length:465        \n 1st Qu.:  21.0   1st Qu.:  36.0   1st Qu.:    18.13   Class :character  \n Median :  52.0   Median :  87.0   Median :    23.60   Mode  :character  \n Mean   : 164.6   Mean   : 289.8   Mean   :  5242.13                     \n 3rd Qu.: 143.0   3rd Qu.: 231.0   3rd Qu.:    37.30                     \n Max.   :3245.0   Max.   :6071.0   Max.   :129451.00                     \n                                   NA's   :3                             \n  annual_wage    \n Min.   : 20883  \n 1st Qu.: 37710  \n Median : 48776  \n Mean   : 57792  \n 3rd Qu.: 75712  \n Max.   :179150  \n NA's   :3       \n\n\nHere we can quickly identify some important information about the dataset:\n\nit includes 465 occupations that currently employ a range of 102 to 34,936 persons,1\nthe typical occupation is projected to grow 7% over the next ten years,\nthe median occupation will have 87 opening each year,2 and\nthe median occupation pays $48,776.\n\n\n\nInferential statistics: linear regression\nNow let’s use linear regression to build a simple model. Let’s see whether annual wages might predict the rate at which persons leave an occupation.\nWe’ll first need to create an additonal variable to calculate the occupational turnover rate, which we’ll use as our outcome variable.\nThen we’ll use the lm function provided in base R. We’ll store the regression model as an R object, so we can work with it. We provide a description of the model in the format outcome_variable ~ predictor1 (+ predictor2 ...). We provide an optional parameter na.action = na.exclude to direct how missing values should be handled.\n\nprojections_data &lt;- projections_data |&gt;\n    mutate(\n        turnover_rate = (Exits + Transfers) / Current_jobs\n        )\n\nprojections_model &lt;- lm(turnover_rate ~ annual_wage, \n                            data = projections_data,\n                            na.action = na.exclude)\n\nsummary(projections_model)\n\n\nCall:\nlm(formula = turnover_rate ~ annual_wage, data = projections_data, \n    na.action = na.exclude)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.076254 -0.014932 -0.004293  0.010591  0.168017 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  1.464e-01  2.962e-03   49.44   &lt;2e-16 ***\nannual_wage -7.687e-07  4.637e-08  -16.58   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02709 on 460 degrees of freedom\n  (3 observations deleted due to missingness)\nMultiple R-squared:  0.374, Adjusted R-squared:  0.3726 \nF-statistic: 274.8 on 1 and 460 DF,  p-value: &lt; 2.2e-16\n\n\nYou can see that annual wages does appear to be a strong predictor of occupational turnover rate, since its coefficient is statistically significant and the model explains a considerable proportion of the variance.\nKeen-eyed readers will note that wages may not be sufficiently normal to use as a variable in linear regression and likely needs a data transformation. Variables with quantity often need a log transform to be treated as sufficiently normal. We can make a quick adjustment to our code for this, without even needing a new variable:\n\nprojections_model &lt;- lm(turnover_rate ~ log(annual_wage), \n                            data = projections_data,\n                            na.action = na.exclude)\n\nsummary(projections_model)\n\n\nCall:\nlm(formula = turnover_rate ~ log(annual_wage), data = projections_data, \n    na.action = na.exclude)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.070564 -0.013939 -0.001799  0.011336  0.151656 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       0.688846   0.029031   23.73   &lt;2e-16 ***\nlog(annual_wage) -0.054000   0.002669  -20.23   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02491 on 460 degrees of freedom\n  (3 observations deleted due to missingness)\nMultiple R-squared:  0.4708,    Adjusted R-squared:  0.4697 \nF-statistic: 409.3 on 1 and 460 DF,  p-value: &lt; 2.2e-16\n\n\nThis correction seems to have improved our model considerably, as the model now explains even more of the variance in occupational turnover rate.\nThe residuals may be of interest,3 so let’s pull them back into our projections_data:\n\nprojections_data &lt;- projections_data |&gt;\n    mutate(residuals = residuals(projections_model))\n\nglimpse(projections_data)\n\nRows: 465\nColumns: 15\n$ SOC            &lt;chr&gt; \"11-1011\", \"11-1021\", \"11-1031\", \"11-2021\", \"11-2022\", …\n$ Occupation     &lt;chr&gt; \"Chief Executives\", \"General and Operations Managers\", …\n$ Current_jobs   &lt;dbl&gt; 1830, 14405, 336, 1777, 2537, 376, 2900, 3250, 5457, 13…\n$ Projected_jobs &lt;dbl&gt; 1671, 15779, 372, 1869, 2668, 413, 3152, 3353, 6422, 14…\n$ Change_num     &lt;dbl&gt; -159, 1374, 36, 92, 131, 37, 252, 103, 965, 87, 29, 228…\n$ Change_pct     &lt;dbl&gt; -0.0869, 0.0954, 0.1071, 0.0518, 0.0516, 0.0984, 0.0869…\n$ Growth         &lt;dbl&gt; -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, 3, 23, 0, 8, 3, 5…\n$ Exits          &lt;dbl&gt; 48, 301, 8, 36, 52, 10, 86, 54, 122, 27, 10, 30, 3, 24,…\n$ Transfers      &lt;dbl&gt; 71, 936, 17, 115, 164, 22, 151, 188, 298, 67, 24, 86, 8…\n$ Tot_openings   &lt;dbl&gt; 103, 1374, 29, 160, 229, 36, 262, 252, 516, 103, 37, 13…\n$ Wage           &lt;dbl&gt; 80.74, 47.63, 37738.00, 62.05, 61.39, 57.62, 47.73, 63.…\n$ Notes          &lt;chr&gt; NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, NA, NA, NA, NA,…\n$ annual_wage    &lt;dbl&gt; 167939.2, 99070.4, 37738.0, 129064.0, 127691.2, 119849.…\n$ turnover_rate  &lt;dbl&gt; 0.06502732, 0.08587296, 0.07440476, 0.08497468, 0.08513…\n$ residuals      &lt;dbl&gt; 0.0258700295, 0.0182162354, -0.0453703761, 0.0315996376…"
  },
  {
    "objectID": "analysis.html#data-visualizations",
    "href": "analysis.html#data-visualizations",
    "title": "3  Statistical analysis & data visualizations",
    "section": "3.2 Data visualizations",
    "text": "3.2 Data visualizations\nR can be used to create all kinds of graphs, utilizing the ggplot2 package from tidyverse. The ggplot2 package is based on (and named after) a book, The Grammar of Graphics (Wilkinson 2012). This is arguably one of the most complex packages, so you’ll want to have the site and cheat sheet available for review while you’re learning it.\nIn this section we’ll work with the IPEDS data we cleaned in Chapter 2."
  },
  {
    "objectID": "analysis.html#exercises",
    "href": "analysis.html#exercises",
    "title": "3  Statistical analysis & data visualizations",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nDescribe how you would quickly examine and summarize a dataset.\n\n# code-fold: true\n# examine a dataset: glimpse()\n# summary descriptive statistics: summary()\n\n\n\nExercise 2\nOpen the ggplot2 cheat sheet. Take a look in particular at the “Geoms” section. What tipes of graphs do you think will be most useful in your work?"
  },
  {
    "objectID": "analysis.html#extra-logistic-regression",
    "href": "analysis.html#extra-logistic-regression",
    "title": "3  Statistical analysis & data visualizations",
    "section": "Extra: logistic regression",
    "text": "Extra: logistic regression\nIn institutional research working with student data, we often create binary variables like retention, persistence, transfer, and graduation. To work with binary outcome variables like these, we need to use methods designed for working with binary outcome variables, like logistic regression.\nLuckily, R provides a package, glm, for generalized linear models like logistic regression. glm includes a parameter family, for which providing family = \"binomial\" will provide for logistic regression.4"
  },
  {
    "objectID": "analysis.html#extra-propensity-score-matching",
    "href": "analysis.html#extra-propensity-score-matching",
    "title": "3  Statistical analysis & data visualizations",
    "section": "Extra: propensity score matching",
    "text": "Extra: propensity score matching\nAnother increasingly important technique for the IR toolbox is propensity score matching, which can be used to create comparison groups for impact evaluation, taking into account factors that may be associated with the likelihood of participating in a program. The MatchIt package provides the functions to carry out this approach, as well as vignettes that provide a good summary (Ho et al. 2023).\n\n\n\n\nHo, Daniel, Kosuke Imai, Gary King, Elizabeth Stuart, Alex Whitworth, and Noah Greifer. 2023. “MatchIt: Nonparametric Preprocessing for Parametric Causal Inference.” https://cran.r-project.org/web/packages/MatchIt/index.html.\n\n\nWilkinson, Leland. 2012. The Grammar of Graphics. Springer."
  },
  {
    "objectID": "analysis.html#footnotes",
    "href": "analysis.html#footnotes",
    "title": "3  Statistical analysis & data visualizations",
    "section": "",
    "text": "Though the summary occupation lines likely cover persons in all occupations, it seems an occupation has to have 100 or more workers to be included at a detail level in these reports.↩︎\nfrom growth ~4/yr, exits ~30/yr, and transfers ~52/yr. Exits are people in the occupation leaving the labor force (mainly retirements), while transfers are people moving into a different occupation.↩︎\nSo that we can use them in Chapter 4!↩︎\nBy default, this uses the logit link function, but using family = binomial(link = \"probit\") will change it to probit regression, etc.↩︎"
  },
  {
    "objectID": "reports.html#installing-quarto",
    "href": "reports.html#installing-quarto",
    "title": "4  Building parameterized reports",
    "section": "4.1 Installing Quarto",
    "text": "4.1 Installing Quarto\nQuarto is built-in to R Studio, so there’s likely nothing extra that you have to do. For Visual Studio Code, you’ll need to install the Quarto extension and Quarto itself from https://quarto.org/docs/get-started/. When you begin a Quarto project that includes .pdf output, you’ll be prompted to install TinyTex by using the OS Terminal command quarto install tinytex.\nUsing Quarto will require the R packages rmarkdown and knitr."
  },
  {
    "objectID": "reports.html#creating-a-quarto-document",
    "href": "reports.html#creating-a-quarto-document",
    "title": "4  Building parameterized reports",
    "section": "4.2 Creating a Quarto document",
    "text": "4.2 Creating a Quarto document\nQuarto documents use the .qmd extension, since Quarto makes extensive use of the markdown syntax. Markdown is a relatively simple coding scheme that is designed to be both human- and machine-readable.\n\n\n\n\n\n\nTip\n\n\n\nMarkdown is used extensively across the modern web, including at Reddit and Discord. GitHub, which we’ll discuss in Chapter 5, uses Markdown for its README.md files to allow developers to share info about their projects in a visually appealing manner.\n\n\nYou can create a Quarto document simply by creating a new file with the extension .qmd. However, both R Studio and Visual Studio Code include menus to utilize templates that give you a great place to start. Go ahead and start a new Quarto project.\n\nQuarto document header\nThe first section of a Quarto document is the header. The header is comprised of a special series of tags that define how the document should be rendered, in a format called YAML1. A very simple such example is to simply define the document’s title:\n---\ntitle: \"New Quarto Project\"\n---\nThe Quarto authoring tutorial introduces you to additional options that you can define in the YAML header.\n\n\nBasic markdown\nNext, we can begin to write out the explanatory text in our document. It is of course helpful to break our document into sections. It is simple to arrange cascading sections by using the # symbol. Using two such symbols consecutively, ##, defines a top-level section header, while additional ones (###, ####) define additional levels.\nWithin regular text you can add links in different ways:\n\n&lt;https://oairp.org/&gt; renders as https://oairp.org\n[the OAIRP website](https://oairp.org/) renders as the OAIRP website\n\nAs well as emphasize text:\n\n*italics* renders as italics\n**bold** renders as bold\n\nWe can use *, +, or - to create lists – they just have to have a blank line between the list and any text above.\nThe Quarto documentation has a great overview of the basics of Markdown.\nLet’s use some of these to continue to build out our .qmd file by adding the following after the header:\n---\ntitle: \"New Quarto Project\"\n---\n\n## Quarto\n\nQuarto is a fantastic way to get started writing reports \nwithout spending **a ton of time** messing with things like: \n\n* font sizes\n* styles\n* spacing\n\nQuarto has excellent documentation at &lt;https://quarto.org&gt;.\n\n\nCode blocks\nFinally, we’ll get back to using R code to run some simple calculations and include the result. We do this by adding a code block. A code block opens and closes with the ``` sequence. Using curly brackets after the code block opening sequence ({}), we define the language that the code block is running: for R, this is {R}.2 Inside, we’ll include the code that will produce the output we’d like to show:\n---\ntitle: \"New Quarto Project\"\n---\n\n## Quarto\n\nQuarto is a fantastic way to get started writing reports \nwithout spending **a ton of time** messing with things like: \n\n* font sizes\n* styles\n* spacing\n\nQuarto has excellent documentation at &lt;https://quarto.org&gt;.\n\n```{R}\ncalc &lt;- 1 + 1\nprint(calc)\n```\nTest this code yourself. You should see it render like it does in Appendix A.\n\n\n\n\n\n\nNote\n\n\n\nBy default, the code block prints both the code and the result. We can add special execution options at the start of the code block to define how it should be processed. Those options start with a special preface #|. Adding the echo: false execution option will suppress the code and only show the output:\n```{R}\n#| echo: false\ncalc &lt;- 1 + 1\nprint(calc)\n```\nYou can review additional Execution Options in the Quarto guide."
  },
  {
    "objectID": "reports.html#in-practice-a-full-report-build",
    "href": "reports.html#in-practice-a-full-report-build",
    "title": "4  Building parameterized reports",
    "section": "4.3 In Practice: A full report build",
    "text": "4.3 In Practice: A full report build\nNow let’s build a full report, working with the data we’ve cleaned and analyzed in Section 2.4 and Chapter 3, projections_data. If we pull the code together, we should have:\n```{R}\n# load libraries\nlibrary(\"readxl\")\nlibrary(\"curl\")\nlibrary(\"tidyverse\")\n\n# define file url\nprojections_url &lt;- \"https://ohiolmi.com/_docs/PROJ/JobsOhio/Central.xlsx\"\n\n# download file\ncurl_download(projections_url, \"projectionsdata.xlsx\")\n\n# read file with approrpiate settings\nprojections_data &lt;- read_xlsx(\n    \"projectionsdata.xlsx\",\n    skip = 6,\n    col_names = c(\n        \"SOC\",\n        \"Occupation\",\n        \"Current_jobs\",\n        \"Projected_jobs\",\n        \"Change_num\",\n        \"Change_pct\",\n        \"Growth\",\n        \"Exits\",\n        \"Transfers\",\n        \"Tot_openings\",\n        \"Wage\",\n        \"Notes\"\n    ),\n    col_types = c(\n        \"text\",\n        \"text\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"text\"\n    )\n    ) |&gt;\n\n    # remove summary occupations and notes/blank rows\n    filter(\n        str_sub(SOC, -4, -1) != \"0000\",\n        str_length(SOC) == 7\n        ) |&gt;\n        \n    # create annual wage column so values are consistent\n    mutate(\n        annual_wage = case_when(\n            Wage &lt; 200 ~ Wage * 2080,\n            .default = Wage\n        )\n    ) |&gt;\n\n    # create turnover rate variable\n    mutate(\n        turnover_rate = (Exits + Transfers) / Current_jobs\n        )\n    \n# run linear regression model to predict turnover rate using annual wage\nprojections_model &lt;- lm(turnover_rate ~ log(annual_wage), \n                            data = projections_data,\n                            na.action = na.exclude)\n\n# add the residuals back to projections_data\nprojections_data &lt;- projections_data |&gt;\n    mutate(residuals = residuals(projections_model))\n```\n\nStarting a new report\nNow we’re going to start a new Quarto file (.qmd). We’ll start with the header but add a title that describes our report, then add a short introduction to the report describing the data source we’re using, and then add the code from above with the execution option include: false so that it is only used to prepare the R objects we’ll use.\n---\ntitle: \"Report: The largest, fastest-growing, and lowest-turnover occupations in Central Ohio\"\n---\n\nSource: ODJFS Bureau of Labor Market Information, Long-Term Occupational Projections \nfor the Central Ohio JobsOhio region, 2020-2030. \n&lt;https://ohiolmi.com/Home/Projections/ProjectionsHome_08.16.23&gt;\n\n```{R}\n#| include: false\n# load libraries\nlibrary(\"readxl\")\nlibrary(\"curl\")\nlibrary(\"tidyverse\")\n\n# define file url\nprojections_url &lt;- \"https://ohiolmi.com/_docs/PROJ/JobsOhio/Central.xlsx\"\n\n# download file\ncurl_download(projections_url, \"projectionsdata.xlsx\")\n\n# read file with approrpiate settings\nprojections_data &lt;- read_xlsx(\n    \"projectionsdata.xlsx\",\n    skip = 6,\n    col_names = c(\n        \"SOC\",\n        \"Occupation\",\n        \"Current_jobs\",\n        \"Projected_jobs\",\n        \"Change_num\",\n        \"Change_pct\",\n        \"Growth\",\n        \"Exits\",\n        \"Transfers\",\n        \"Tot_openings\",\n        \"Wage\",\n        \"Notes\"\n    ),\n    col_types = c(\n        \"text\",\n        \"text\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"text\"\n    )\n    ) |&gt;\n\n    # remove summary occupations and notes/blank rows\n    filter(\n        str_sub(SOC, -4, -1) != \"0000\",\n        str_length(SOC) == 7\n        ) |&gt;\n        \n    # create annual wage column so values are consistent\n    mutate(\n        annual_wage = case_when(\n            Wage &lt; 200 ~ Wage * 2080,\n            .default = Wage\n        )\n    ) |&gt;\n\n    # create turnover rate variable\n    mutate(\n        turnover_rate = (Exits + Transfers) / Current_jobs\n        )\n    \n# run linear regression model to predict turnover rate using annual wage\nprojections_model &lt;- lm(turnover_rate ~ log(annual_wage), \n                            data = projections_data,\n                            na.action = na.exclude)\n\n# add the residuals back to projections_data\nprojections_data &lt;- projections_data |&gt;\n    mutate(residuals = residuals(projections_model))\n```\n\n\nAdding content\nNow we’ll need to call upon a few libraries that we’ll use to prepare data tables for a report. We’ll need knitr to use code to build tables for the report and scales to format raw numbers appropriately.3\n\nThough we’re using only data tables for this report, you can build a report with graphs like those you built in Chapter 3 in much the same way. See the Quarto guide for more details.\n\nWe’ll use the label_ functions from scales to create new display variables we’ll use in our printed tables. Those label_ functions work similarly to Microsoft Excel’s TEXT() functions. We’ll include the include: false option again since we don’t need this code or any output in our report, just to continue to build out the R data objects we’re using.\n```{R}\n#| include: false\nlibrary(\"knitr\")\nlibrary(\"scales\")\nprojections_data &lt;- projections_data |&gt;\n    mutate(\n        Current_jobs_displ = label_number(big.mark = \",\")(Current_jobs),\n        Change_pct_displ = label_percent(accuracy = .1)(Change_pct),\n        Tot_openings_displ = label_number(big.mark = \",\")(Tot_openings),\n        annual_wage_displ = label_dollar()(annual_wage),\n        turnover_rate_displ = label_percent(accuracy = .1)(turnover_rate)\n    )\n\n```\nLet’s build out our first section. We’ll make a summary table of the 15 largest occupations, displaying the occupation name, code, current number of jobs, 10-yr change, annual openings, median earnings, and turnover rate.\nWe’ll start with a section header name (preceded by ##). Next we’ll open a code block, and specify the echo: false execution option so that only the result appears in the report, not the code.\nThen we’ll use slice_max() to pull the 15 largest occupations (by passing the Current_jobs variable and an n = 15 parameter). We’ll sort (arrange) those occupations in decending order using arrange() but using - ahead of the variable name to indicate the sort should be descending, then use select() to keep only those variables used in the report. If we were using Pivot Tables in Microsoft Excel, these steps would be equivalent to filtering and sorting on row values.\nFinally, we’ll call the kable function from the knitr package to build a nice table designed to be read by humans. Within that function we’ll specify how the columns will align (using align =) and give proper column headings (using col.names =).\n## Largest 15 occupations\n\n```{R}\n#| echo: false\nprojections_data |&gt;\n    slice_max(Current_jobs, n = 15) |&gt;\n    arrange(-Current_jobs) |&gt;\n    select(\n        Occupation, SOC, Current_jobs_displ, Change_pct_displ,\n        Tot_openings_displ, annual_wage_displ, turnover_rate_displ\n    ) |&gt;\n    kable(\n        col.names = c(\n            \"Occupation\", \"SOC\", \"Current jobs\", \"10-yr change\",\n            \"Annual openings\", \"Median earnings\", \"Turnover rate\"\n        ),\n        align = c(\"l\",\"l\",\"r\",\"r\",\"r\",\"r\",\"r\")\n        )\n```\n\nWe’re only modifying projections_data temporarily, not storing the result back as projections_data. This allows us to build additional similar tables quickly.\n\nFor the fastest-growing and lowest-turnover, we’ll focus on modifying the slice_ and arrange lines of code:\n## 15 fastest-growing occupations\n\n```{R}\n#| echo: false\nprojections_data |&gt;\n    slice_max(Change_pct, n = 15) |&gt;\n    arrange(-Change_pct) |&gt;\n    select(\n        Occupation, SOC, Current_jobs_displ, Change_pct_displ,\n        Tot_openings_displ, annual_wage_displ, turnover_rate_displ\n    ) |&gt;\n    kable(\n        col.names = c(\n            \"Occupation\", \"SOC\", \"Current jobs\", \"10-yr change\",\n            \"Annual openings\", \"Median earnings\", \"Turnover rate\"\n        ),\n        align = c(\"l\",\"l\",\"r\",\"r\",\"r\",\"r\",\"r\")\n        )\n```\n\n## 15 occupations with the lowest turnover rates\n\n```{R}\n#| echo: false\nprojections_data |&gt;\n    slice_min(turnover_rate, n = 15) |&gt;\n    arrange(turnover_rate) |&gt;\n    select(\n        Occupation, SOC, Current_jobs_displ, Change_pct_displ,\n        Tot_openings_displ, annual_wage_displ, turnover_rate_displ\n    ) |&gt;\n    kable(\n        col.names = c(\n            \"Occupation\", \"SOC\", \"Current jobs\", \"10-yr change\",\n            \"Annual openings\", \"Median earnings\", \"Turnover rate\"\n        ),\n        align = c(\"l\",\"l\",\"r\",\"r\",\"r\",\"r\",\"r\")\n        )\n```\nLastly, we’ll make use of the analysis we ran in Chapter 3. We’ll generate a table with the lowest turnover rates relative to median earnings by using the residuals that we received from our regression model.\n## 15 occupations with the lowest turnover rates relative to median earnings\n\n```{R}\n#| echo: false\nprojections_data |&gt;\n    slice_min(residuals, n = 15) |&gt;\n    arrange(residuals) |&gt;\n    select(\n        Occupation, SOC, Current_jobs_displ, Change_pct_displ,\n        Tot_openings_displ, annual_wage_displ, turnover_rate_displ\n    ) |&gt;\n    kable(\n        col.names = c(\n            \"Occupation\", \"SOC\", \"Current jobs\", \"10-yr change\",\n            \"Annual openings\", \"Median earnings\", \"Turnover rate\"\n        ),\n        align = c(\"l\",\"l\",\"r\",\"r\",\"r\",\"r\",\"r\")\n        )\n```\n\n\nFull render\nRun the report. You should see it render and pull together the four tables we worked on above. Check your work against Appendix B"
  },
  {
    "objectID": "reports.html#parameterizing-your-report",
    "href": "reports.html#parameterizing-your-report",
    "title": "4  Building parameterized reports",
    "section": "4.4 Parameterizing your report",
    "text": "4.4 Parameterizing your report\nLet’s prepare the report to run with different options by modifying just a few sections of the code.\nThe key here is to use Quarto’s powerful parameters capability. We can set parameters in the Quarto document header, and then reference them in our R code blocks.\nIn the Quarto document header, we’ll add the params: option, followed by parameter names and values:\n---\ntitle: \"Report: The largest, fastest-growing, and lowest-turnover occupations in our region\"\nparams:\n    region: Southeast\n    top_n: 10\n---\nWe’ll then change pieces of our code to call those parameters. We call them by using params$region and params$top_n.4\nOutside of our code blocks, like in headers and regular text we can call the parameters using special inline code:`r params$value`.5\nWe’ll need to:\n\nChange the reference to the region in the “Source:” paragraph;\nModify the projections_url line using str_c so that we include the region;\nChange the 15 in every header; and\nChange the 15 in the slice_ functions in each code block.\n\nIf successful, we’ll be able to run the report for a specified region (that matches the ODJFS projections URL) and a specified limit for the number of occupations returned for the tables. We’ll change from Central Ohio to Southeast Ohio and from 15 occupations to 10 occupations to test our code.\n---\ntitle: \"Report: The largest, fastest-growing, and lowest-turnover occupations in our region\"\nparams:\n    region: Southeast\n    top_n: 10\n---\n\nSource: ODJFS Bureau of Labor Market Information, \nLong-Term Occupational Projections for the `r params$region` Ohio JobsOhio region, 2020-2030. \n&lt;https://ohiolmi.com/Home/Projections/ProjectionsHome_08.16.23&gt;\n\n```{R}\n#| include: false\n# load libraries\nlibrary(\"readxl\")\nlibrary(\"curl\")\nlibrary(\"tidyverse\")\n\n# define file url\nprojections_url &lt;- str_c(\n                    \"https://ohiolmi.com/_docs/PROJ/JobsOhio/\",\n                    params$region,\n                    \".xlsx\"\n)\n\n# download file\ncurl_download(projections_url, \"projectionsdata2.xlsx\")\n\n# read file with approrpiate settings\nprojections_data &lt;- read_xlsx(\n    \"projectionsdata2.xlsx\",\n    skip = 6,\n    col_names = c(\n        \"SOC\",\n        \"Occupation\",\n        \"Current_jobs\",\n        \"Projected_jobs\",\n        \"Change_num\",\n        \"Change_pct\",\n        \"Growth\",\n        \"Exits\",\n        \"Transfers\",\n        \"Tot_openings\",\n        \"Wage\",\n        \"Notes\"\n    ),\n    col_types = c(\n        \"text\",\n        \"text\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"text\"\n    )\n    ) |&gt;\n\n    # remove summary occupations and notes/blank rows\n    filter(\n        str_sub(SOC, -4, -1) != \"0000\",\n        str_length(SOC) == 7\n        ) |&gt;\n        \n    # create annual wage column so values are consistent\n    mutate(\n        annual_wage = case_when(\n            Wage &lt; 200 ~ Wage * 2080,\n            .default = Wage\n        )\n    ) \n    \n```\n\n```{R}\n#| include: false\nprojections_data &lt;- projections_data |&gt;\n    mutate(\n        turnover_rate = (Exits + Transfers) / Current_jobs\n        )\n\nprojections_model &lt;- lm(turnover_rate ~ log(annual_wage), \n                            data = projections_data,\n                            na.action = na.exclude)\n\nprojections_data &lt;- projections_data |&gt;\n    mutate(residuals = residuals(projections_model))\n```\n\n```{R}\n#| include: false\nlibrary(\"knitr\")\nlibrary(\"scales\")\nprojections_data &lt;- projections_data |&gt;\n    mutate(\n        Current_jobs_displ = label_number(big.mark = \",\")(Current_jobs),\n        Change_pct_displ = label_percent(accuracy = .1)(Change_pct),\n        Tot_openings_displ = label_number(big.mark = \",\")(Tot_openings),\n        annual_wage_displ = label_dollar()(annual_wage),\n        turnover_rate_displ = label_percent(accuracy = .1)(turnover_rate)\n    )\n\n```\n\n\n## Largest `r params$top_n` occupations\n\n```{R}\n#| echo: false\nprojections_data |&gt;\n    slice_max(Current_jobs, n = params$top_n) |&gt;\n    arrange(-Current_jobs) |&gt;\n    select(\n        Occupation, SOC, Current_jobs_displ, Change_pct_displ,\n        Tot_openings_displ, annual_wage_displ, turnover_rate_displ\n    ) |&gt;\n    kable(\n        col.names = c(\n            \"Occupation\", \"SOC\", \"Current jobs\", \"10-yr change\",\n            \"Annual openings\", \"Median earnings\", \"Turnover rate\"\n        ),\n        align = c(\"l\",\"l\",\"r\",\"r\",\"r\",\"r\",\"r\")\n        )\n```\n\n## `r params$top_n` fastest-growing occupations\n\n```{R}\n#| echo: false\nprojections_data |&gt;\n    slice_max(Change_pct, n = params$top_n) |&gt;\n    arrange(-Change_pct) |&gt;\n    select(\n        Occupation, SOC, Current_jobs_displ, Change_pct_displ,\n        Tot_openings_displ, annual_wage_displ, turnover_rate_displ\n    ) |&gt;\n    kable(\n        col.names = c(\n            \"Occupation\", \"SOC\", \"Current jobs\", \"10-yr change\",\n            \"Annual openings\", \"Median earnings\", \"Turnover rate\"\n        ),\n        align = c(\"l\",\"l\",\"r\",\"r\",\"r\",\"r\",\"r\")\n        )\n```\n\n## `r params$top_n` occupations with the lowest turnover rates\n\n```{R}\n#| echo: false\nprojections_data |&gt;\n    slice_min(turnover_rate, n = params$top_n) |&gt;\n    arrange(turnover_rate) |&gt;\n    select(\n        Occupation, SOC, Current_jobs_displ, Change_pct_displ,\n        Tot_openings_displ, annual_wage_displ, turnover_rate_displ\n    ) |&gt;\n    kable(\n        col.names = c(\n            \"Occupation\", \"SOC\", \"Current jobs\", \"10-yr change\",\n            \"Annual openings\", \"Median earnings\", \"Turnover rate\"\n        ),\n        align = c(\"l\",\"l\",\"r\",\"r\",\"r\",\"r\",\"r\")\n        )\n```\n\n## `r params$top_n` occupations with the lowest turnover rates relative to median earnings\n\n```{R}\n#| echo: false\nprojections_data |&gt;\n    slice_min(residuals, n = params$top_n) |&gt;\n    arrange(residuals) |&gt;\n    select(\n        Occupation, SOC, Current_jobs_displ, Change_pct_displ,\n        Tot_openings_displ, annual_wage_displ, turnover_rate_displ\n    ) |&gt;\n    kable(\n        col.names = c(\n            \"Occupation\", \"SOC\", \"Current jobs\", \"10-yr change\",\n            \"Annual openings\", \"Median earnings\", \"Turnover rate\"\n        ),\n        align = c(\"l\",\"l\",\"r\",\"r\",\"r\",\"r\",\"r\")\n        )\n```\nOnce again, you can check your code against Appendix C."
  },
  {
    "objectID": "reports.html#exercises",
    "href": "reports.html#exercises",
    "title": "4  Building parameterized reports",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nPractice using markdown. How would you:\n\nEmphasize text?\nCreate a link with custom text?\nAdd an image?\nCreate a numbered list?\n\nTake a look at the RStudio cheat sheet for Quarto and the cheet sheet for rmarkdown, specifically the section to the far right titled “Write with Markdown.”6\n\n\nExercise 2\nBranstorm a few different ways you might use parameters to create a series of reports that utilize much of the same code."
  },
  {
    "objectID": "reports.html#extra-other-quarto-document-types",
    "href": "reports.html#extra-other-quarto-document-types",
    "title": "4  Building parameterized reports",
    "section": "Extra: Other Quarto document types",
    "text": "Extra: Other Quarto document types\nThough you may be most interested in creating a report or article, Quarto is capable of generating other document types, including powerpoints, websites, and ebooks.\nThose types do get a bit more complicated, but rely on many of the basics you’ve learned in this section as building blocks. The [Quarto guide] details these possibilities.\nThis guide itself is written as a Quarto ebook, as are other resources like R for Data Science (Wickham, Çetinkaya-Rundel, and Grolemund 2023). If interested in seeing examples of quarto projects in action, you can browse their code on GitHub, which we’ll learn in Chapter 5.\n\n\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. \"O’Reilly Media, Inc.\". https://r4ds.hadley.nz/."
  },
  {
    "objectID": "reports.html#footnotes",
    "href": "reports.html#footnotes",
    "title": "4  Building parameterized reports",
    "section": "",
    "text": "YAML stands for Yet Another Markup Language, but don’t worry - there’s not actually much to learn↩︎\nQuarto also works with other languages, including Python and Julia↩︎\nscales is actually used by ggplot2, but we’ll load it just in case.↩︎\nparams is an R data object being passed by Quarto, and $ tells R to pull out specific variables (columns) from that object.↩︎\nInline code can also be used to call summary figures in your text paragraphs. We did this for the guide in Chapter 3 in the section about summary().↩︎\nQuarto is an evolution of rmarkdown, adding additional functionality and programming languages.↩︎"
  },
  {
    "objectID": "collaboration.html#setting-up-github",
    "href": "collaboration.html#setting-up-github",
    "title": "5  Collaborating on code",
    "section": "5.1 Setting up GitHub",
    "text": "5.1 Setting up GitHub\nGitHub is a developer platform to host code and provide for collaboration. Now owned by Microsoft, it has added numerous complex features that can help in software development. As professionals focused on data analytics, we’ll just focus on the core code-hosting and collaboration tools for now.\nHead to https://github.com/ and create a new account if you do not already have one.\n\n\n\n\n\n\nNote\n\n\n\nThere’s no need to have multiple accounts like one for work and one for personal. In fact, GitHub recommends having just one account. You can add multiple email addresses to your GitHub account, and your GitHub account can be a member of an organization that hosts repositories.\n\n\nOnce you have your GitHub account, you’ll be able to connect it with Git when we install it in Section 5.3."
  },
  {
    "objectID": "collaboration.html#an-overview-of-github",
    "href": "collaboration.html#an-overview-of-github",
    "title": "5  Collaborating on code",
    "section": "5.2 An overview of GitHub",
    "text": "5.2 An overview of GitHub\nWhen you log into GitHub, you’ll be presented with a dashboard that may be fairly empty. You can reach your profile by clicking on the icon in the top right. It will look similar to:\n\n\n\nA GitHub profile overview. In the center is a summary of recent contributions of code. To the left is a set of personal info that you can add in settings, plus a list of organizations that you are a member of on GitHub. At the top, you can see a menu that begins with Overview.\n\n\nA GitHub organization is a special type of GitHub account that can host code projects. Personal GitHub accounts can be added as members of the organization. Organizations can have multiple teams within the organization - you should check with others at your institution before creating one.\nWe’ve created a GitHub Organization for the Ohio Association for Institutional Research and Planning: https://github.com/oairp. If you click on it, you should see the following:\n\n\n\nThe OAIRP GitHub Organization page. It shows as hosting two repositories, or code projects: one special repository (.github) that holds the summary README.md file displayed and one for this guide. You can also see that the authors of this guide are members of the organization.\n\n\nAt this point, you’ve noticed that both the personal account profile page and the organizational profile page have top navigation bars that begin with Overview and Repositories. Repositories, or repos for short, are essentially code projects.2 Go ahead and click into the PoweringIRwithR repo:\n\nHere you can see the source code for this guide, and an overview of the most recent changes to the various files. You will also notice that the repo has one branch (main), two collaborators (the authors), and a deployment to GitHub Pages. The buttons towards the top allow you to follow the project in different ways and even make a copy of the project for yourself."
  },
  {
    "objectID": "collaboration.html#sec-Gitsetup",
    "href": "collaboration.html#sec-Gitsetup",
    "title": "5  Collaborating on code",
    "section": "5.3 Setting up Git",
    "text": "5.3 Setting up Git\nGit is a free, open-source version control system. When enabled, it keeps track of changes you make to your code, and is small and fast so you won’t notice it’s enabled. Install Git at https://git-scm.com/ - click on Downloads then your operating system. Accept the defaults, particularly to use the main branch as the default branch and to enable Git Credential Manager, which will enable you to connect with GitHub.\nThere is one thing you’ll need to do to make Git operational after you install - you’ll have to let it know who you are. This is so it can track who is making the file changes to your projects that you are working on. Run the following code in your OS terminal, but be sure to replace you@example.com and Your Name with your own information.\n\n\nTerminal\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n\nThough Git can be used locally, a lot of the power of using Git is in connecting with an online repository and collaborative version control system like GitHub.\n\n\n\n\n\n\nNote\n\n\n\nYou’ll want to associate the email address you use in Git with your GitHub account, so that your edits can be properly associated with your account."
  },
  {
    "objectID": "collaboration.html#sec-syncGitHub",
    "href": "collaboration.html#sec-syncGitHub",
    "title": "5  Collaborating on code",
    "section": "5.4 Syncing a project with GitHub",
    "text": "5.4 Syncing a project with GitHub\nTo use GitHub with your project, you’ll need to create a repository (repo) in GitHub and then begin working with it on your local computer.\nFrom your GitHub dashboard, you can click the + button in the top right, then click “New Repository”. Alternatively, from your profile, click “Repositories”, then click “New”.\nYou’ll be presented with as screen with a few options:\n\n\n\nThe GitHub “Create a new repository” screen.\n\n\n\nWho should be the owner of the repository, you or an organization you belong to? (You can change this later)\nWhat to name the repository? (You can change this later, but may not want to.)\nA description that will be presented on the repository screen\nWhether the repository should be public or private\nIf you’d like to add any of three special files, which you can add later but may be helpful to begin with:\n\nA README.md file, which displays details about your project on the repo page,\nA .gitignore file to exclude common temporary files from Git and the sync with GitHub, with R as one of the template options, and\nA license, which controls how your code can be used. Not needed for a private repo, but you might want to consider using one for a public repo.\n\n\nOnce you’ve created it, you’ll be taken to its page. Copy the URL for this page.\nReturn to R Studio or Visual Studio Code.\n\nIf you’re starting a new project from scratch:\n\nIn R Studio, when you click “New Project” you will select Version Control &gt; Git &gt; Clone Git Repository. Provide the URL and the file location and name of the folder you’d like to create on your computer for your project.\nIn Visual Studio Code, you should see the option to Clone Git Repository right on the Welcome page. If logged into GitHub in Visual Studio Code, you’ll be able to navigate to your repository.\n\nIf you’re using an existing project:\n\nIn R Studio, click Tools &gt; Version Control &gt; Project Setup. Select Git. R Studio will reload your project. In the top right pane, you’ll now see Git as a tab. Click it, then find “New Branch”. In there you’ll be able to select “Add remote” and enter your repository URL.\nIn Visual Studio Code, click Source Control on the left pane, then"
  },
  {
    "objectID": "collaboration.html#the-basics-of-git-operations",
    "href": "collaboration.html#the-basics-of-git-operations",
    "title": "5  Collaborating on code",
    "section": "5.5 The basics of Git operations",
    "text": "5.5 The basics of Git operations\nWhen you make changes to your code that you’d like to save with version control, you’ll stage them with a short message describing your change. This is called a commit. Both R Studio and Visual Studio Code will visually indicate which files have changed since the last commits to those files, and you can peek into exactly what lines of code are changing and how. Because this complete history of changes is stored, you can revert to older versions of code if you ever need to.\nWhen you’re ready to sync with GitHub, you’ll first pull any changes to the repository, then push your changes. This combined action is called a sync.\nHow often should you sync? As often as you’d like, but particularly when you’ve completed something that works. When building this guide, for example, we synced when we completed particular paragraphs and code blocks.\n\n\n\n\n\n\nWarning\n\n\n\nThe .gitignore file is used to exclude particular files from the Git (version control) operations and the sync with GitHub. We usually want to ignore any temporary files and any large files that could slow down syncs and eat up space online, particularly when they are not needed.\nBecause we’re working with data, we often have larger data files in our project folder, like we did with the IPEDS and occupational projections data. Since our code begins a download of those datasets, we don’t need to be including the files with our code.\nThe .gitignore template described above handles common data used by R Studio, but you may find that you need to add lines to the .gitignore to ignore any Excel and compressed data files by using *.zip and *.xlsx.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThere are additional Git concepts that may be helpful if you are working in a larger team:\n\nmerge conflict\n\nan issue that occurs when multiple changes are being made to the same line(s) of code. Push/sync will return an error until resolved, typically by making changes to the file that is blocked by the merge conflict.\n\nbranch\n\nan additional copy of the code that can be used when a developer or team of developers are working on a set of features in development. This ensures that the main copy is not affected during the development.\n\nmerge branch\n\nthe process of merging new features created by a separate branch back to the main branch.\n\n\nThe details of these are beyond the scope of this guide, but it’s helpful to know about them so you know when you may want to learn more. One resource is the Git & GitHub RStudio cheat sheet."
  },
  {
    "objectID": "collaboration.html#exercises",
    "href": "collaboration.html#exercises",
    "title": "5  Collaborating on code",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nLog into GitHub and navigate to the PoweringIRwithR repository. Star it!\n\n\nExercise 2\nSearch \"institutional research\" on GitHub. Find something intersting!"
  },
  {
    "objectID": "collaboration.html#extra-about-github-pages",
    "href": "collaboration.html#extra-about-github-pages",
    "title": "5  Collaborating on code",
    "section": "Extra: About GitHub Pages",
    "text": "Extra: About GitHub Pages\nGitHub Pages is a website hosting service for GitHub accounts and public projects.\nYou can use Quarto to generate the files needed for a website or ebook, publish them to GitHub, set up GitHub pages, and then view your project site live on the web!\nAccount sites are in the format username.github.io while projects are hosted as username.github.io/reponame.\nThis guide was created as an ebook in Quarto and is hosted by GitHub & GitHub Pages. Since this guide is the PoweringIRwithR repo hosted by the OAIRP organization, the URL is https://oairp.github.io/PoweringIRwithR."
  },
  {
    "objectID": "collaboration.html#footnotes",
    "href": "collaboration.html#footnotes",
    "title": "5  Collaborating on code",
    "section": "",
    "text": "In our experience, most solo IR practitioners wish to be part of a team one day!↩︎\nNot to be confused with what is labeled in GitHub as Projects, which is a project management tool to assist with tracking tasks associated with larger code projects↩︎"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Ho, Daniel, Kosuke Imai, Gary King, Elizabeth Stuart, Alex Whitworth,\nand Noah Greifer. 2023. “MatchIt:\nNonparametric Preprocessing for\nParametric Causal\nInference.” https://cran.r-project.org/web/packages/MatchIt/index.html.\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy\nD’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019.\n“Welcome to the tidyverse.”\nJournal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. \"O’Reilly Media, Inc.\". https://r4ds.hadley.nz/.\n\n\nWilkinson, Leland. 2012. The Grammar of Graphics. Springer."
  },
  {
    "objectID": "examplebasicquarto.html#quarto",
    "href": "examplebasicquarto.html#quarto",
    "title": "Appendix A — New Quarto Project",
    "section": "Quarto",
    "text": "Quarto\nQuarto is a fantastic way to get started writing reports without spending a ton of time messing with things like:\n\nfont sizes\nstyles\nspacing\n\nQuarto has excellent documentation at https://quarto.org.\n\ncalc &lt;- 1 + 1\nprint(calc)\n\n[1] 2"
  },
  {
    "objectID": "examplefullquartoreport.html#largest-15-occupations",
    "href": "examplefullquartoreport.html#largest-15-occupations",
    "title": "Appendix B — Report: The largest, fastest-growing, and lowest-turnover occupations in Central Ohio",
    "section": "Largest 15 occupations",
    "text": "Largest 15 occupations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOccupation\nSOC\nCurrent jobs\n10-yr change\nAnnual openings\nMedian earnings\nTurnover rate\n\n\n\n\nLaborers and Freight, Stock, and Material Movers, Hand\n53-7062\n34,936\n13.5%\n5,350\n$37,066\n14.0%\n\n\nCustomer Service Representatives\n43-4051\n33,376\n-1.3%\n4,120\n$37,440\n12.5%\n\n\nRetail Salespersons\n41-2031\n27,404\n-1.3%\n3,733\n$27,893\n13.8%\n\n\nFast Food and Counter Workers\n35-3023\n27,269\n9.9%\n6,071\n$22,422\n21.3%\n\n\nRegistered Nurses\n29-1141\n26,388\n14.8%\n1,859\n$75,046\n5.6%\n\n\nStockers and Order Fillers\n53-7065\n24,654\n8.5%\n4,180\n$36,067\n16.1%\n\n\nHome Health and Personal Care Aides\n31-1120\n23,796\n36.2%\n4,251\n$24,003\n14.2%\n\n\nOffice Clerks, General\n43-9061\n19,984\n-0.6%\n2,257\n$37,710\n11.4%\n\n\nSoftware Developers and Software Quality Assurance Analysts and Testers\n15-1256\n18,223\n9.9%\n1,562\n$102,939\n7.6%\n\n\nProject Management Specialists and Business Operations Specialists, All Other\n13-1198\n17,598\n4.0%\n1,366\n$74,672\n7.4%\n\n\nCashiers\n41-2011\n17,377\n-11.2%\n2,770\n$22,963\n17.1%\n\n\nJanitors and Cleaners, Except Maids and Housekeeping Cleaners\n37-2011\n17,091\n4.2%\n2,383\n$29,432\n13.5%\n\n\nMiscellaneous Assemblers and Fabricators\n51-2090\n16,599\n-0.9%\n1,793\n$36,982\n10.9%\n\n\nWaiters and Waitresses\n35-3031\n15,688\n14.5%\n3,474\n$20,883\n20.7%\n\n\nHeavy and Tractor-Trailer Truck Drivers\n53-3032\n15,020\n11.4%\n1,899\n$48,693\n11.5%"
  },
  {
    "objectID": "examplefullquartoreport.html#fastest-growing-occupations",
    "href": "examplefullquartoreport.html#fastest-growing-occupations",
    "title": "Appendix B — Report: The largest, fastest-growing, and lowest-turnover occupations in Central Ohio",
    "section": "15 fastest-growing occupations",
    "text": "15 fastest-growing occupations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOccupation\nSOC\nCurrent jobs\n10-yr change\nAnnual openings\nMedian earnings\nTurnover rate\n\n\n\n\nUshers, Lobby Attendants, and Ticket Takers\n39-3031\n608\n58.9%\n216\n$23,920\n29.6%\n\n\nNurse Practitioners\n29-1171\n1,771\n53.4%\n212\n$103,230\n6.6%\n\n\nNonfarm Animal Caretakers\n39-2021\n1,619\n41.2%\n354\n$23,067\n17.7%\n\n\nCooks, Restaurant\n35-2014\n6,119\n41.0%\n1,316\n$29,307\n17.4%\n\n\nOccupational Therapy Assistants\n31-2011\n500\n40.8%\n94\n$62,358\n14.8%\n\n\nFitness Trainers and Aerobics Instructors\n39-9031\n2,137\n40.0%\n479\n$31,907\n18.4%\n\n\nMedical and Health Services Managers\n11-9111\n3,463\n37.8%\n443\n$99,341\n9.0%\n\n\nHome Health and Personal Care Aides\n31-1120\n23,796\n36.2%\n4,251\n$24,003\n14.2%\n\n\nPreschool Teachers, Except Special Education\n25-2011\n3,789\n36.1%\n581\n$29,037\n11.7%\n\n\nInterpreters and Translators\n27-3091\n2,124\n34.7%\n307\n$38,979\n11.0%\n\n\nPhysician Assistants\n29-1071\n706\n34.0%\n70\n$102,482\n6.5%\n\n\nSpeech-Language Pathologists\n29-1127\n1,257\n33.6%\n129\n$79,269\n6.9%\n\n\nPhysical Therapist Assistants\n31-2021\n985\n33.3%\n169\n$62,566\n13.8%\n\n\nEpidemiologists\n19-1041\n177\n32.8%\n21\n$77,750\n8.5%\n\n\nLogisticians\n13-1081\n1,767\n30.4%\n229\n$77,459\n9.9%"
  },
  {
    "objectID": "examplefullquartoreport.html#occupations-with-the-lowest-turnover-rates",
    "href": "examplefullquartoreport.html#occupations-with-the-lowest-turnover-rates",
    "title": "Appendix B — Report: The largest, fastest-growing, and lowest-turnover occupations in Central Ohio",
    "section": "15 occupations with the lowest turnover rates",
    "text": "15 occupations with the lowest turnover rates\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOccupation\nSOC\nCurrent jobs\n10-yr change\nAnnual openings\nMedian earnings\nTurnover rate\n\n\n\n\nChiropractors\n29-1011\n387\n15.5%\n15\n$61,027\n2.3%\n\n\nObstetricians and Gynecologists\n29-1218\n210\n0.0%\n5\n$169,666\n2.4%\n\n\nSurgeons, Except Ophthalmologists\n29-1248\n396\n1.0%\n10\nNA\n2.5%\n\n\nAnesthesiologists\n29-1211\n363\n5.0%\n12\nNA\n2.8%\n\n\nGeneral Internal Medicine Physicians\n29-1216\n506\n3.0%\n16\n$177,050\n2.8%\n\n\nPsychiatrists\n29-1223\n108\n18.5%\n5\nNA\n2.8%\n\n\nDentists, General\n29-1021\n741\n12.2%\n30\n$167,814\n2.8%\n\n\nPhysicians, All Other; and Ophthalmologists, Except Pediatric\n29-1228\n2,142\n10.1%\n83\n$77,896\n2.8%\n\n\nFamily Medicine Physicians\n29-1215\n333\n9.6%\n13\n$179,150\n3.0%\n\n\nOptometrists\n29-1041\n302\n14.6%\n14\n$102,523\n3.3%\n\n\nVeterinarians\n29-1131\n800\n17.4%\n42\n$99,486\n3.5%\n\n\nPharmacists\n29-1051\n2,341\n2.2%\n95\n$128,357\n3.8%\n\n\nPhysical Therapists\n29-1123\n1,604\n21.8%\n107\n$99,341\n4.5%\n\n\nJudges, Magistrate Judges, and Magistrates\n23-1023\n446\n3.4%\n23\n$81,765\n4.7%\n\n\nAdministrative Law Judges, Adjudicators, and Hearing Officers\n23-1021\n399\n-0.8%\n19\n$63,419\n4.8%"
  },
  {
    "objectID": "examplefullquartoreport.html#occupations-with-the-lowest-turnover-rates-relative-to-median-earnings",
    "href": "examplefullquartoreport.html#occupations-with-the-lowest-turnover-rates-relative-to-median-earnings",
    "title": "Appendix B — Report: The largest, fastest-growing, and lowest-turnover occupations in Central Ohio",
    "section": "15 occupations with the lowest turnover rates relative to median earnings",
    "text": "15 occupations with the lowest turnover rates relative to median earnings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOccupation\nSOC\nCurrent jobs\n10-yr change\nAnnual openings\nMedian earnings\nTurnover rate\n\n\n\n\nChiropractors\n29-1011\n387\n15.5%\n15\n$61,027\n2.3%\n\n\nPsychiatric Technicians\n29-2053\n400\n24.5%\n41\n$29,661\n7.8%\n\n\nEmergency Medical Technicians and Paramedics\n29-2040\n939\n7.9%\n70\n$36,941\n6.7%\n\n\nFloral Designers\n27-1023\n297\n-17.5%\n19\n$28,704\n8.1%\n\n\nPhysicians, All Other; and Ophthalmologists, Except Pediatric\n29-1228\n2,142\n10.1%\n83\n$77,896\n2.8%\n\n\nExercise Physiologists\n29-1128\n188\n16.5%\n16\n$37,024\n6.9%\n\n\nPharmacy Technicians\n29-2052\n3,103\n3.9%\n234\n$36,650\n7.2%\n\n\nVeterinary Technologists and Technicians\n29-2056\n1,023\n15.0%\n92\n$36,421\n7.5%\n\n\nDietetic Technicians\n29-2051\n186\n14.0%\n17\n$36,566\n7.5%\n\n\nLegislators\n11-1031\n336\n10.7%\n29\n$37,738\n7.4%\n\n\nAdministrative Law Judges, Adjudicators, and Hearing Officers\n23-1021\n399\n-0.8%\n19\n$63,419\n4.8%\n\n\nOphthalmic Medical Technicians\n29-2057\n559\n21.5%\n56\n$36,650\n7.9%\n\n\nRespiratory Therapists\n29-1126\n1,057\n28.9%\n86\n$62,130\n5.3%\n\n\nMerchandise Displayers and Window Trimmers\n27-1026\n1,371\n4.4%\n132\n$30,285\n9.2%\n\n\nCouriers and Messengers\n43-5021\n582\n-5.8%\n51\n$30,597\n9.3%"
  },
  {
    "objectID": "exampleparameterizedreport.html#largest-10-occupations",
    "href": "exampleparameterizedreport.html#largest-10-occupations",
    "title": "Appendix C — Report: The largest, fastest-growing, and lowest-turnover occupations in our region",
    "section": "Largest 10 occupations",
    "text": "Largest 10 occupations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOccupation\nSOC\nCurrent jobs\n10-yr change\nAnnual openings\nMedian earnings\nTurnover rate\n\n\n\n\nFarmers, Ranchers, and Other Agricultural Managers\n11-9013\n19,850\n4.5%\n2,047\n$73,050\n9.9%\n\n\nFast Food and Counter Workers\n35-3023\n12,076\n8.4%\n2,652\n$21,341\n21.1%\n\n\nCashiers\n41-2011\n10,405\n-11.3%\n1,657\n$22,235\n17.1%\n\n\nRetail Salespersons\n41-2031\n8,960\n-2.1%\n1,209\n$24,128\n13.7%\n\n\nHome Health and Personal Care Aides\n31-1120\n7,980\n24.1%\n1,270\n$23,192\n13.5%\n\n\nRegistered Nurses\n29-1141\n7,944\n6.3%\n475\n$61,298\n5.3%\n\n\nOffice Clerks, General\n43-9061\n7,231\n-3.1%\n788\n$34,653\n11.2%\n\n\nHeavy and Tractor-Trailer Truck Drivers\n53-3032\n7,123\n10.1%\n885\n$47,278\n11.4%\n\n\nLaborers and Freight, Stock, and Material Movers, Hand\n53-7062\n5,657\n7.8%\n813\n$32,677\n13.6%\n\n\nElementary School Teachers, Except Special Education\n25-2021\n5,130\n3.3%\n386\n$61,318\n7.2%"
  },
  {
    "objectID": "exampleparameterizedreport.html#fastest-growing-occupations",
    "href": "exampleparameterizedreport.html#fastest-growing-occupations",
    "title": "Appendix C — Report: The largest, fastest-growing, and lowest-turnover occupations in our region",
    "section": "10 fastest-growing occupations",
    "text": "10 fastest-growing occupations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOccupation\nSOC\nCurrent jobs\n10-yr change\nAnnual openings\nMedian earnings\nTurnover rate\n\n\n\n\nNurse Practitioners\n29-1171\n736\n56.2%\n91\n$100,922\n6.8%\n\n\nCooks, Restaurant\n35-2014\n2,096\n40.7%\n449\n$27,414\n17.4%\n\n\nPassenger Vehicle Drivers, Except Bus Drivers, Transit and Intercity\n53-3058\n1,540\n34.0%\n261\n$37,544\n13.6%\n\n\nLogisticians\n13-1081\n281\n32.4%\n37\n$77,022\n10.0%\n\n\nRoustabouts, Oil and Gas\n47-5071\n335\n29.2%\n55\n$29,765\n13.4%\n\n\nPhysician Assistants\n29-1071\n124\n28.2%\n12\n$118,664\n6.5%\n\n\nPhysical Therapist Assistants\n31-2021\n444\n27.5%\n72\n$60,112\n13.5%\n\n\nPhotographers\n27-4021\n181\n27.1%\n24\n$30,597\n10.5%\n\n\nSelf-Enrichment Education Teachers\n25-3021\n251\n25.9%\n38\n$30,035\n12.7%\n\n\nMedical and Health Services Managers\n11-9111\n897\n25.8%\n99\n$79,934\n8.5%"
  },
  {
    "objectID": "exampleparameterizedreport.html#occupations-with-the-lowest-turnover-rates",
    "href": "exampleparameterizedreport.html#occupations-with-the-lowest-turnover-rates",
    "title": "Appendix C — Report: The largest, fastest-growing, and lowest-turnover occupations in our region",
    "section": "10 occupations with the lowest turnover rates",
    "text": "10 occupations with the lowest turnover rates\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOccupation\nSOC\nCurrent jobs\n10-yr change\nAnnual openings\nMedian earnings\nTurnover rate\n\n\n\n\nFamily Medicine Physicians\n29-1215\n197\n1.5%\n5\nNA\n2.5%\n\n\nChiropractors\n29-1011\n116\n5.2%\n4\n$78,229\n2.6%\n\n\nPhysicians, All Other; and Ophthalmologists, Except Pediatric\n29-1228\n1,166\n1.4%\n34\n$77,896\n2.7%\n\n\nSurgeons, Except Ophthalmologists\n29-1248\n101\n-2.0%\n3\nNA\n3.0%\n\n\nDentists, General\n29-1021\n200\n0.0%\n6\n$164,070\n3.0%\n\n\nOptometrists\n29-1041\n280\n4.3%\n10\n$98,862\n3.2%\n\n\nVeterinarians\n29-1131\n229\n7.4%\n10\n$95,597\n3.5%\n\n\nPharmacists\n29-1051\n818\n-4.8%\n26\n$126,610\n3.7%\n\n\nPhysical Therapists\n29-1123\n475\n10.3%\n25\n$88,213\n4.2%\n\n\nJudges, Magistrate Judges, and Magistrates\n23-1023\n257\n0.4%\n12\n$99,050\n4.7%"
  },
  {
    "objectID": "exampleparameterizedreport.html#occupations-with-the-lowest-turnover-rates-relative-to-median-earnings",
    "href": "exampleparameterizedreport.html#occupations-with-the-lowest-turnover-rates-relative-to-median-earnings",
    "title": "Appendix C — Report: The largest, fastest-growing, and lowest-turnover occupations in our region",
    "section": "10 occupations with the lowest turnover rates relative to median earnings",
    "text": "10 occupations with the lowest turnover rates relative to median earnings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOccupation\nSOC\nCurrent jobs\n10-yr change\nAnnual openings\nMedian earnings\nTurnover rate\n\n\n\n\nRadio and Television Announcers\n27-3011\n124\n-11.3%\n9\n$23,130\n8.1%\n\n\nPharmacy Technicians\n29-2052\n1,216\n1.6%\n89\n$29,266\n7.2%\n\n\nFloral Designers\n27-1023\n130\n-22.3%\n8\n$25,314\n8.5%\n\n\nChiropractors\n29-1011\n116\n5.2%\n4\n$78,229\n2.6%\n\n\nEmergency Medical Technicians and Paramedics\n29-2040\n1,049\n7.9%\n78\n$36,941\n6.7%\n\n\nPhysicians, All Other; and Ophthalmologists, Except Pediatric\n29-1228\n1,166\n1.4%\n34\n$77,896\n2.7%\n\n\nLegislators\n11-1031\n321\n4.7%\n26\n$36,208\n7.5%\n\n\nRespiratory Therapists\n29-1126\n375\n20.8%\n27\n$59,322\n5.1%\n\n\nCouriers and Messengers\n43-5021\n208\n-5.3%\n18\n$28,246\n9.1%\n\n\nMerchandise Displayers and Window Trimmers\n27-1026\n266\n0.4%\n24\n$29,515\n9.0%"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About the authors",
    "section": "",
    "text": "The guide and workshop were developed by:\nThomas Jay Benjamin is the Director for Institutional Research at Lorain County Community College. Thomas began using R following a workshop at the Spring 2019 OAIRP conference and has used it to assist with IPEDS, benchmarking, evaluation, and parameterized reporting (which he presented at the Spring 2023 OAIRP virtual conference). Most recently Thomas hosted an intern from LCCC’s Data Analytics program who learned R during his experience.\nLynzee Murray serves as an analyst within the Office of Institutional Effectiveness at Columbus State Community College. Her introduction to R and RStudio occurred during her master’s program in Data Analytics at Bowling Green State University. During her tenure at Columbus State, Lynzee has utilized R for crafting data visualizations, conducting text analysis, and constructing comparison groups through propensity score matching.\nThomas and Lynzee can be contacted through the OAIRP Membership Portal."
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "Thomas & Lynzee thank the OAIRP Executive Committee for their support in hosting this workshop and guide."
  }
]