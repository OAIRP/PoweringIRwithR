[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Powering Institutional Research with R",
    "section": "",
    "text": "Preface\nThis online reference guide has been developed to accompany the October 19, 2023 workshop of the Ohio Association for Institutional Research and Planning, held at Mount Vernon, Ohio.\nThe workshop will follow a timeline aligned to the sections of this reference guide:\n\nChapter 1: Software setup and overview\nChapter 2: Importing and cleaning data\nChapter 3: Statistical analyses & data visualizations\nChapter 4: Building parameterized reports\nChapter 5: Collaborating on code\n\nThis reference guide is designed for institutional researchers, by institutional researchers, so it’s chock full of examples relevant to IR and often compares R functions to what you might use in Microsoft Excel."
  },
  {
    "objectID": "intro.html#installation",
    "href": "intro.html#installation",
    "title": "1  Software setup and overview",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nFirst, we’ll want to install the R software (R Core Team 2023). Go to https://r-project.org and follow the download link.\nThat will take you to the Comprehensive R Archive Network, or CRAN, which is “a network of servers that store identical, up-to-date, versions of code and documentation for R.”\nThe closest CRAN mirror for Institutional Researchers working in Ohio is hosted by Case Western Reserve University. Its web address is https://cran.case.edu.\nChoose the distribution appropriate for your operating system under “Download and Install R,” then click on the link for “install R for the first time,” and then finally the larger “Download R…” link. Accept the licenses and the default settings."
  },
  {
    "objectID": "intro.html#using-the-r-terminal",
    "href": "intro.html#using-the-r-terminal",
    "title": "1  Software setup and overview",
    "section": "1.2 Using the R Terminal",
    "text": "1.2 Using the R Terminal\nYou should now be able to find R listed among your installed programs. Go ahead and run it. You should see a screen like this:\n\nThe inner window is the R Console, also called the R Terminal, which is the R software interface:\n\nLet’s run our first command. Since R is statistical software after all, let’s use it as a calculator. Enter 1 + 1 and press Enter. You should see the following:\n\n1 + 1\n\n[1] 2\n\n\nCongrats, you’ve run your first R command!"
  },
  {
    "objectID": "intro.html#sec-installRpackages",
    "href": "intro.html#sec-installRpackages",
    "title": "1  Software setup and overview",
    "section": "1.3 Installing R packages",
    "text": "1.3 Installing R packages\nThough base R contains all kinds of helpful functions and tools, installing R packages provide additional functionality.\nCRAN includes both the base R system and an array of approved R packages.\nOne such package that we’ll be using is tidyverse, a collection of R packages that make data analysis in R better. We’ll learn more about tidyverse in Chapter 2.\nTo install the package, run the following command in the terminal:1\n\ninstall.packages(\"tidyverse\")\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that the package name must be in quotes (\"\") in the install.packages() command.\n\n\nWhen you first install an R package in a session, you will be prompted to choose a CRAN mirror, like you did when you first downloaded R:\n\nWe’ll choose USA (OH) [https], which is the mirror hosted in Ohio by Case.\n\n\n\n\n\n\nTip\n\n\n\nSee Section 1.6.5 for details on how to set your default CRAN repository.\n\n\nWe’ll install additional packages later.\nAccessing R in the basic R terminal is fairly limited, so we can close out of the program (or enter the q() command). R will ask you if you’d like to save the workspace image - just click “No”."
  },
  {
    "objectID": "intro.html#using-an-ide",
    "href": "intro.html#using-an-ide",
    "title": "1  Software setup and overview",
    "section": "1.4 Using an IDE",
    "text": "1.4 Using an IDE\nThe better way to work with R is to use an integrated development environment, or IDE. The IDE includes the R Terminal that will show the R output, but also additional helpful features like a file editor (to work with a script), a file browser, an image viewer (to view graph and other figure output), an R object viewer, R help text, and more.\n\nR Studio\nOne popular IDE for R is the open source edition of R Studio, developed by posit, a company that contributes greatly to various R packages and tools, including Quarto which we’ll use in Chapter 4. It can be downloaded at https://posit.co/products/open-source/rstudio/.\nAfter you install and run for the first time, and let it detect the installation of R, your screen should look like this:\n\n\n\nOn the left is the R Console, with a tab for your OS Terminal. On the top right is the R environment, an R object viewer, with additional tabs for history, etc. On the bottom right is a file viewer, with additoinal tabs for plots, packages, help, and more.\n\n\n\n\nVisual Studio Code\nOne popular alternative to R Studio is Visual Studio Code. Visual Studio Code, or VS Code, is developed by Microsoft, and designed for a wide range of programming languages, supported by many extensions. Visual Studio Code’s source code is open source, but has additional Microsoft capabilities.2 Head to https://code.visualstudio.com to download Visual Studio Code.\n\n\n\n\n\n\nNote\n\n\n\nSince Visual Studio Code is designed to work with many languages, you’ll need to complete additional steps to configure VS Code for working with R. For this reason, it may be best to begin using R Studio and revisit VS Code at a later time. However, VS Code does include additonal features and better integration with Git and GitHub, which will be detailed in Chapter 5.\n\n\nYou’ll then need to install the R extension for Visual Studio Code which can be done using the Extensions module on the far left (or using Ctrl+Shift+X). You’ll also need to install the langugageserver package and want to install the httpgd package so that Visual Studio Code can display help text and plots, respectively. Refer back to Section 1.3 for details how to install packages.\nDepending on how you installed R, you may need to point Visual Studio Code to your R installation. Enter Settings (File &gt; Preferences &gt; Settings or Ctrl+,) then type or look for RTerm for your operating system. Point this to your instance of R (e.g. C:\\Program Files\\R\\R-4.3.1\\bin\\R.exe).\n\n\n\nOn the far left is a set of icons for the various modules, with the first selected for File Explorer and the R environment icon also visible. On the right is the Welcome window; this area will show file contents and view output when requested. On the bottom is a set of terminals, one of which is for R."
  },
  {
    "objectID": "intro.html#creating-a-project",
    "href": "intro.html#creating-a-project",
    "title": "1  Software setup and overview",
    "section": "1.5 Creating a project",
    "text": "1.5 Creating a project\nIrrespective of the IDE you are using, you’ll use folders on your computer to hold a file or set of files for an R project. Go ahead and create a new folder in a location on your computer, such as Documents\\MyFirstRProject\\.\nDepending on your IDE, you’ll open your project by:\n\nIn R Studio, you’ll first click on “Project: (None)” in the upper right, then “New Project”, then “Existing Directory”, then point to the folder you created.\nIn VS Code, you’ll click “Open Folder” from the Welcome screen.\n\n\n\n\n\n\n\nTip\n\n\n\nIf you end up with a lot of files, you can create folders within your project folder. This can help keep your project organized."
  },
  {
    "objectID": "intro.html#writing-an-r-script",
    "href": "intro.html#writing-an-r-script",
    "title": "1  Software setup and overview",
    "section": "1.6 Writing an R script",
    "text": "1.6 Writing an R script\nUp until now, we’ve entered commands directly into the R terminal. But much of the power of using R comes from writing many lines of code that work together.\nTo do this, we can create files that contain such code, as scripts.\nCreate a new .R file in your project folder. You can call it anything you’d like, such as script.R. By using the .R (or .r) extension, you’re indicating that the file is an R script.\nAt the top of the file we want to load any R packages that we’ll be using. We do this with the library() function. Let’s load tidyverse, then run our code (by clicking the Run button):\n\n\n\nscript.R\n\nlibrary(\"tidyverse\")\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNotice that the output shows the exact packages loaded as part of tidyverse. Not all packages have an output, but many do display some helpful information. The conflicts section notes that certain functionality from base R (stats) is masked by the packages loaded. This means when we run a function like filter(), by default it will now use the version from dplyr, which is part of tidyverse. We can always explicitly run a certain version by entering a function in the format package::function(), like stats::filter().\n\n\n\n\n\n\nImportant\n\n\n\nNote that we never include an install.packages() command in our R script, only in the terminal. We don’t want to modify our computer using our script, and this is espeically important when we get to sharing code!\n\n\nNow we can add additional code to the script. Let’s create a new object my_fav_number and assign it the value of 2. We’ll then ask the system to print out that object, so that we can see the value. Don’t worry, we’ll go over exactly what is happening here in Chapter 2.\n\n\n\nscript.R\n\nlibrary(\"tidyverse\")\n\nmy_fav_number &lt;- 2\n\nprint(my_fav_number)\n\n\nFinally, let’s add notes to ourselves so that we can remember what our code is doing. To do this, we use comments. In R, comments are denoted by the # symbol. When R encounters a # symbol, everything in the same line after that symbol is ignored when running the code. We always add a space between the # symbol and the text we’d like to use as a comment.\nWe can use comments at the end of a line of code to describe what is happening in that line, and we can write a comment as a whole line in the code to show what is happening in sections of code:\n\n\n\nscript.R\n\n# load libraries\nlibrary(\"tidyverse\")\n\nmy_fav_number &lt;- 2  # 2 is my favorite number\n\nprint(my_fav_number) # print out the stored value\n\n\nNow that we’ve written our first R script (!), we can run it. We can either run the entire script at once, or walk through the code line-by-line with Shift-Ctrl. Walking through code line-by-line can be a great way to develop code and test as you go. You should see the terminal return:\n\n\n[1] 2\n\n\nA few notes about keeping your code clean:\n\nUse blank lines to separate logically separate lines of code.\nUse spaces properly around characters and symbols.\nUse comments to keep your code comprehensible.\n\nWe’ll go over additional notes about writing clean code in the coming chapters."
  },
  {
    "objectID": "intro.html#exersices",
    "href": "intro.html#exersices",
    "title": "1  Software setup and overview",
    "section": "Exersices",
    "text": "Exersices\n\nExercise 1\nIn Chapter 2 we’ll use the package readxl to read in data from Excel files, since IR professionals often encounter data we need to work with in Excel files! How would you install the readxl package?\n\n\nCode\ninstall.packages(\"readxl\")\n\n\n\n\nExercise 2\nStart a new R script that loads the readxl package. Include a comment to remind you of what is happening.\n\n\nCode\n# load libraries\nlibrary(\"readxl\") # to read data from Excel files"
  },
  {
    "objectID": "intro.html#extra-keeping-r-up-to-date",
    "href": "intro.html#extra-keeping-r-up-to-date",
    "title": "1  Software setup and overview",
    "section": "Extra: Keeping R up-to-date",
    "text": "Extra: Keeping R up-to-date\n\nUpdating R packages\nIn the R terminal, run:\n\nupdate.packages()\n\nPackages with new updates will be detected and you will be prompted to respond Y or yes to accept.\nIf you want all packages updated without your confirmation, you can add the ask = FALSE argument:\n\nupdate.packages(ask = FALSE)\n\n\n\n\n\n\n\nTip\n\n\n\nYou will see a warning when packages are built under a different version of R than you are running. If you see this, you likely want to update your version of R.\n\n\n\n\nUpdating R\nThe installr package can assist with keeping the R installation up-to-date. In the terminal, run the following:\n\ninstallr::updateR()\n\n\n\n\n\n\n\nTip\n\n\n\nYou will be prompted as to whether you’d like to copy over all packages from the current version of R. This is a good idea!"
  },
  {
    "objectID": "intro.html#extra-r-profile-and-environment",
    "href": "intro.html#extra-r-profile-and-environment",
    "title": "1  Software setup and overview",
    "section": "Extra: R Profile and Environment",
    "text": "Extra: R Profile and Environment\nR will read certain options from special files that you can modify:\n\nR profile\nYour R profile can contain a range of settings to customize how you interact with R.\nThe usethis package can be used to edit your R profile:\n\nusethis::edit_r_profile()\n\nA new window will open with your R profile file that you can edit.\nFor example, you may want to set your default CRAN mirror to the one hosted at Case, since it is in Ohio and you may be as well. Add the following line to your R profile file:\n\n\n\n.Rprofile\n\noptions(repos=c(CRAN=\"https://cran.case.edu/\"))\n\n\nWhen done, save the file, then close all R terminals and reopen them.\n\n\nR environment\nThe R environment can store variables that you can call upon using special R functions. It is a great way to keep keys and other secrets out of your code but still accessible.\nThe usethis package can be used to easily edit your R environment:\n\nusethis::edit_r_envrion()\n\nTo store a variable named test_var, add the following to the file:\n\n\n\n.Renviron\n\ntest_var:\"this is my test value\"\n\n\nWhen done, save the file, then close all R terminals and reopen them.\nYou’ll be able to access such variables like so:\n\nSys.getenv(\"test_var\")\n\n[1] \"this is my test value\"\n\n\n\n\n\n\n\n\nWarning\n\n\n\nSome packages request that you store things like API keys as specified environment variables. You can also use this to store common URLs, including FTP sites, but keep in mind that they are accessible directly in the .Renviron file on your computer.\n\n\n\n\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/."
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "1  Software setup and overview",
    "section": "",
    "text": "Yes, you can also use the menus to install packages, but we won’t be using this interface for long.↩︎\nCheck out https://vscodium.com for a version without these Microsoft customizations.↩︎"
  },
  {
    "objectID": "workingwithdata.html#creating-r-data-objects",
    "href": "workingwithdata.html#creating-r-data-objects",
    "title": "2  Importing and cleaning data",
    "section": "2.1 Creating R data objects",
    "text": "2.1 Creating R data objects\nWickham et al. (2019)"
  },
  {
    "objectID": "workingwithdata.html#importing-data",
    "href": "workingwithdata.html#importing-data",
    "title": "2  Importing and cleaning data",
    "section": "2.2 Importing data",
    "text": "2.2 Importing data\n\nBy file format\n\nComma-separated values (.csv)\n\n\nExcel files (.xlsx)\n\nlibrary(\"readxl\")\n\n\n\n\nBy file location\n\nFrom a local file\n\n\nFrom an online file\n\nlibrary(\"curl\")\n\n\n\n\nFrom a database"
  },
  {
    "objectID": "workingwithdata.html#tidy-data",
    "href": "workingwithdata.html#tidy-data",
    "title": "2  Importing and cleaning data",
    "section": "2.3 Tidy data",
    "text": "2.3 Tidy data\n\nlibrary(\"tidyverse\")"
  },
  {
    "objectID": "workingwithdata.html#sec-dataset1",
    "href": "workingwithdata.html#sec-dataset1",
    "title": "2  Importing and cleaning data",
    "section": "2.4 In Practice: Dataset #1 – IPEDS data",
    "text": "2.4 In Practice: Dataset #1 – IPEDS data\n\nDataset #1 complete code"
  },
  {
    "objectID": "workingwithdata.html#sec-dataset2",
    "href": "workingwithdata.html#sec-dataset2",
    "title": "2  Importing and cleaning data",
    "section": "2.5 In Practice: Dataset #2 – Occupation Projections data",
    "text": "2.5 In Practice: Dataset #2 – Occupation Projections data\nFor our second example dataset, we’ll work with Occupational Projections data from the Ohio Department of Jobs and Family Services, Bureau of Labor Statistics. The Long-Term Projections data by JobsOhio region and Metropolitan Statistical Area (MSA) can be found at https://ohiolmi.com/Home/Projections/ProjectionsHome_08.16.23. As interest in post-graduate outcomes increases throughout higher education, institutional researchers are increasingly working with labor market data.\nWe’ll begin with the Central Ohio Excel file. If you copy the URL, you’ll get ,https://ohiolmi.com/_docs/PROJ/JobsOhio/Central.xlsx.\n\n\n\n\n\n\nNote\n\n\n\nIf you hover over the file links, you’ll notice that they share a common URL stem (https://ohiolmi.com/_docs/PROJ/JobsOhio/), which will be helpful to use in parameterized reports, covered in Chapter 4.\n\n\nLet’s store that URL to make it easier to use:\n\nprojections_url &lt;- \"https://ohiolmi.com/_docs/PROJ/JobsOhio/Central.xlsx\"\n\nWe’ll pull down the file with curl:\n\ncurl_download(projections_url, \"projectionsdata.xlsx\")\n\nNext we’ll try to import the file as a data object, and then check the results with summary() and glimpse():\n\nprojections_data &lt;- read_xlsx(\"projectionsdata.xlsx\")\n\nNew names:\n• `` -&gt; `...2`\n• `` -&gt; `...3`\n• `` -&gt; `...4`\n• `` -&gt; `...5`\n• `` -&gt; `...6`\n• `` -&gt; `...7`\n• `` -&gt; `...8`\n• `` -&gt; `...9`\n• `` -&gt; `...10`\n• `` -&gt; `...11`\n• `` -&gt; `...12`\n\nglimpse(projections_data)\n\nRows: 501\nColumns: 12\n$ `JobsOhio Regional Network - Central Region` &lt;chr&gt; \"Occupational* Employment…\n$ ...2                                         &lt;chr&gt; NA, NA, NA, NA, \"Occupati…\n$ ...3                                         &lt;chr&gt; NA, NA, \"Employment*\", \"2…\n$ ...4                                         &lt;chr&gt; NA, NA, NA, \"2030\", \"Proj…\n$ ...5                                         &lt;chr&gt; NA, NA, \"Change in\", \"Emp…\n$ ...6                                         &lt;chr&gt; NA, NA, NA, NA, \"Percent\"…\n$ ...7                                         &lt;chr&gt; NA, NA, NA, \"Annual Openi…\n$ ...8                                         &lt;chr&gt; NA, NA, NA, NA, \"Exits\", …\n$ ...9                                         &lt;chr&gt; NA, NA, NA, NA, \"Transfer…\n$ ...10                                        &lt;chr&gt; NA, NA, NA, NA, \"Total\", …\n$ ...11                                        &lt;chr&gt; NA, NA, NA, \"Median Wage\"…\n$ ...12                                        &lt;chr&gt; NA, NA, NA, NA, NA, NA, N…\n\nsummary(projections_data)\n\n JobsOhio Regional Network - Central Region     ...2          \n Length:501                                 Length:501        \n Class :character                           Class :character  \n Mode  :character                           Mode  :character  \n     ...3               ...4               ...5               ...6          \n Length:501         Length:501         Length:501         Length:501        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n     ...7               ...8               ...9              ...10          \n Length:501         Length:501         Length:501         Length:501        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n    ...11              ...12          \n Length:501         Length:501        \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n\n\nThat returned a bunch of junk, because there are multiple header rows in the file. Luckily, there’s an optional parameter we can add to read_xlsx to skip to the line we want (line 6 has the headers we want), which we can read about in the readxl documentation.\n\nprojections_data &lt;- read_xlsx(\"projectionsdata.xlsx\", skip = 5)\n\nNew names:\n• `` -&gt; `...12`\n\nglimpse(projections_data)\n\nRows: 496\nColumns: 12\n$ Code                 &lt;chr&gt; \"00-0000\", \"11-0000\", \"11-1011\", \"11-1021\", \"11-1…\n$ `Occupational Title` &lt;chr&gt; \"Total, All Occupations\", \"Management Occupations…\n$ Annual               &lt;chr&gt; \"1168921\", \"70397\", \"1830\", \"14405\", \"336\", \"1777…\n$ Projected            &lt;dbl&gt; 1261966, 77059, 1671, 15779, 372, 1869, 2668, 413…\n$ `2020-2030`          &lt;dbl&gt; 93045, 6662, -159, 1374, 36, 92, 131, 37, 252, 10…\n$ Percent              &lt;dbl&gt; 0.0796, 0.0946, -0.0869, 0.0954, 0.1071, 0.0518, …\n$ Growth               &lt;dbl&gt; 9304, 666, -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, …\n$ Exits                &lt;dbl&gt; 50873, 2143, 48, 301, 8, 36, 52, 10, 86, 54, 122,…\n$ Transfers            &lt;dbl&gt; 79184, 3818, 71, 936, 17, 115, 164, 22, 151, 188,…\n$ Total                &lt;dbl&gt; 139361, 6627, 103, 1374, 29, 160, 229, 36, 262, 2…\n$ `May 2021`           &lt;chr&gt; \"22.4\", \"48.2\", \"80.739999999999995\", \"47.63\", \"3…\n$ ...12                &lt;chr&gt; NA, NA, NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, N…\n\nsummary(projections_data)\n\n     Code           Occupational Title    Annual            Projected      \n Length:496         Length:496         Length:496         Min.   :    104  \n Class :character   Class :character   Class :character   1st Qu.:    400  \n Mode  :character   Mode  :character   Mode  :character   Median :    976  \n                                                          Mean   :   7667  \n                                                          3rd Qu.:   2903  \n                                                          Max.   :1261966  \n                                                          NA's   :8        \n   2020-2030          Percent             Growth            Exits        \n Min.   :-1975.0   Min.   :-0.35860   Min.   :-198.00   Min.   :    2.0  \n 1st Qu.:    6.0   1st Qu.: 0.01740   1st Qu.:   1.00   1st Qu.:   12.0  \n Median :   53.0   Median : 0.06970   Median :   5.00   Median :   34.5  \n Mean   :  566.1   Mean   : 0.07336   Mean   :  56.61   Mean   :  309.3  \n 3rd Qu.:  216.2   3rd Qu.: 0.12575   3rd Qu.:  22.00   3rd Qu.:  101.2  \n Max.   :93045.0   Max.   : 0.58880   Max.   :9304.00   Max.   :50873.0  \n NA's   :8         NA's   :8          NA's   :8         NA's   :8        \n   Transfers           Total            May 2021            ...12          \n Min.   :    1.0   Min.   :     5.0   Length:496         Length:496        \n 1st Qu.:   21.0   1st Qu.:    37.0   Class :character   Class :character  \n Median :   57.5   Median :    95.5   Mode  :character   Mode  :character  \n Mean   :  481.4   Mean   :   847.3                                        \n 3rd Qu.:  179.8   3rd Qu.:   301.8                                        \n Max.   :79184.0   Max.   :139361.0                                        \n NA's   :8         NA's   :8                                               \n\n\nIt seems we have a little more data cleaning to do. We need to change the types of a few columns1, rename a few columns, and do some filtering to remove the summary occupations. Let’s use additional parameters in read_xlsx to define types and column names. By providing the column names instead of importing them, we need to change the skip = option to 6 instead of 5.\n\n\n\n\n\n\nNote\n\n\n\nThere’s often more than one way to do something. Instead of providing column names on the import (and changing the skip parameter), we could rename the columns with the rename() function after import.\n\n\n\nprojections_data &lt;- read_xlsx(\n    \"projectionsdata.xlsx\",\n    skip = 6,\n    col_names = c(\n        \"SOC\",\n        \"Occupation\",\n        \"Current_jobs\",\n        \"Projected_jobs\",\n        \"Change_num\",\n        \"Change_pct\",\n        \"Growth\",\n        \"Exits\",\n        \"Transfers\",\n        \"Tot_openings\",\n        \"Wage\",\n        \"Notes\"\n    ),\n    col_types = c(\n        \"text\",\n        \"text\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"text\"\n    )\n)\n\nglimpse(projections_data)\n\nRows: 496\nColumns: 12\n$ SOC            &lt;chr&gt; \"00-0000\", \"11-0000\", \"11-1011\", \"11-1021\", \"11-1031\", …\n$ Occupation     &lt;chr&gt; \"Total, All Occupations\", \"Management Occupations\", \"Ch…\n$ Current_jobs   &lt;dbl&gt; 1168921, 70397, 1830, 14405, 336, 1777, 2537, 376, 2900…\n$ Projected_jobs &lt;dbl&gt; 1261966, 77059, 1671, 15779, 372, 1869, 2668, 413, 3152…\n$ Change_num     &lt;dbl&gt; 93045, 6662, -159, 1374, 36, 92, 131, 37, 252, 103, 965…\n$ Change_pct     &lt;dbl&gt; 0.0796, 0.0946, -0.0869, 0.0954, 0.1071, 0.0518, 0.0516…\n$ Growth         &lt;dbl&gt; 9304, 666, -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, 3, 23,…\n$ Exits          &lt;dbl&gt; 50873, 2143, 48, 301, 8, 36, 52, 10, 86, 54, 122, 27, 1…\n$ Transfers      &lt;dbl&gt; 79184, 3818, 71, 936, 17, 115, 164, 22, 151, 188, 298, …\n$ Tot_openings   &lt;dbl&gt; 139361, 6627, 103, 1374, 29, 160, 229, 36, 262, 252, 51…\n$ Wage           &lt;dbl&gt; 22.40, 48.20, 80.74, 47.63, 37738.00, 62.05, 61.39, 57.…\n$ Notes          &lt;chr&gt; NA, NA, NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, NA, NA,…\n\nsummary(projections_data)\n\n     SOC             Occupation         Current_jobs       Projected_jobs   \n Length:496         Length:496         Min.   :    102.0   Min.   :    104  \n Class :character   Class :character   1st Qu.:    397.5   1st Qu.:    400  \n Mode  :character   Mode  :character   Median :    937.5   Median :    976  \n                                       Mean   :   7101.0   Mean   :   7667  \n                                       3rd Qu.:   2729.0   3rd Qu.:   2903  \n                                       Max.   :1168921.0   Max.   :1261966  \n                                       NA's   :8           NA's   :8        \n   Change_num        Change_pct           Growth            Exits        \n Min.   :-1975.0   Min.   :-0.35860   Min.   :-198.00   Min.   :    2.0  \n 1st Qu.:    6.0   1st Qu.: 0.01740   1st Qu.:   1.00   1st Qu.:   12.0  \n Median :   53.0   Median : 0.06970   Median :   5.00   Median :   34.5  \n Mean   :  566.1   Mean   : 0.07336   Mean   :  56.61   Mean   :  309.3  \n 3rd Qu.:  216.2   3rd Qu.: 0.12575   3rd Qu.:  22.00   3rd Qu.:  101.2  \n Max.   :93045.0   Max.   : 0.58880   Max.   :9304.00   Max.   :50873.0  \n NA's   :8         NA's   :8          NA's   :8         NA's   :8        \n   Transfers        Tot_openings           Wage              Notes          \n Min.   :    1.0   Min.   :     5.0   Min.   :    10.04   Length:496        \n 1st Qu.:   21.0   1st Qu.:    37.0   1st Qu.:    18.13   Class :character  \n Median :   57.5   Median :    95.5   Median :    23.53   Mode  :character  \n Mean   :  481.4   Mean   :   847.3   Mean   :  4994.70                     \n 3rd Qu.:  179.8   3rd Qu.:   301.8   3rd Qu.:    37.24                     \n Max.   :79184.0   Max.   :139361.0   Max.   :129451.00                     \n NA's   :8         NA's   :8          NA's   :11                            \n\n\nNext, let’s filter the dataset to remove those summary occupations and any notes at the end.\nSummary occupations are coded with SOC codes ending in “0000”, so we can quickly identify them. In Excel, we’d likely use the MID() or RIGHT() commands to pull out that sequence. In R’s tidyverse package, we can use str_sub(), which works very similar to these, extracting a subset of the string field based on character position. Negative values mean work from the end.\nAny rows with anything other than the SOC code in the SOC column should be ignored. Since SOC codes are 7 characters long, we’ll try to use that. In Excel, we’d use LEN() to get the length, while here we’ll use str_length() from the tidyverse package. Note that in R, equals and not equals (== and !=) are different than in Excel (= and &lt;&gt;)\n\nprojections_data &lt;- projections_data |&gt;\n    filter(\n        str_sub(SOC, -4, -1) != \"0000\",\n        str_length(SOC) == 7\n        )\n\nglimpse(projections_data)\n\nRows: 465\nColumns: 12\n$ SOC            &lt;chr&gt; \"11-1011\", \"11-1021\", \"11-1031\", \"11-2021\", \"11-2022\", …\n$ Occupation     &lt;chr&gt; \"Chief Executives\", \"General and Operations Managers\", …\n$ Current_jobs   &lt;dbl&gt; 1830, 14405, 336, 1777, 2537, 376, 2900, 3250, 5457, 13…\n$ Projected_jobs &lt;dbl&gt; 1671, 15779, 372, 1869, 2668, 413, 3152, 3353, 6422, 14…\n$ Change_num     &lt;dbl&gt; -159, 1374, 36, 92, 131, 37, 252, 103, 965, 87, 29, 228…\n$ Change_pct     &lt;dbl&gt; -0.0869, 0.0954, 0.1071, 0.0518, 0.0516, 0.0984, 0.0869…\n$ Growth         &lt;dbl&gt; -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, 3, 23, 0, 8, 3, 5…\n$ Exits          &lt;dbl&gt; 48, 301, 8, 36, 52, 10, 86, 54, 122, 27, 10, 30, 3, 24,…\n$ Transfers      &lt;dbl&gt; 71, 936, 17, 115, 164, 22, 151, 188, 298, 67, 24, 86, 8…\n$ Tot_openings   &lt;dbl&gt; 103, 1374, 29, 160, 229, 36, 262, 252, 516, 103, 37, 13…\n$ Wage           &lt;dbl&gt; 80.74, 47.63, 37738.00, 62.05, 61.39, 57.62, 47.73, 63.…\n$ Notes          &lt;chr&gt; NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, NA, NA, NA, NA,…\n\nsummary(projections_data)\n\n     SOC             Occupation         Current_jobs   Projected_jobs \n Length:465         Length:465         Min.   :  102   Min.   :  104  \n Class :character   Class :character   1st Qu.:  376   1st Qu.:  395  \n Mode  :character   Mode  :character   Median :  841   Median :  902  \n                                       Mean   : 2425   Mean   : 2618  \n                                       3rd Qu.: 2296   3rd Qu.: 2583  \n                                       Max.   :34936   Max.   :39662  \n                                                                      \n   Change_num        Change_pct           Growth            Exits       \n Min.   :-1948.0   Min.   :-0.35860   Min.   :-195.00   Min.   :   2.0  \n 1st Qu.:    5.0   1st Qu.: 0.01650   1st Qu.:   0.00   1st Qu.:  12.0  \n Median :   44.0   Median : 0.06850   Median :   4.00   Median :  30.0  \n Mean   :  193.9   Mean   : 0.07258   Mean   :  19.39   Mean   : 105.8  \n 3rd Qu.:  185.0   3rd Qu.: 0.12710   3rd Qu.:  18.00   3rd Qu.:  82.0  \n Max.   : 8608.0   Max.   : 0.58880   Max.   : 861.00   Max.   :2775.0  \n                                                                        \n   Transfers       Tot_openings         Wage              Notes          \n Min.   :   1.0   Min.   :   5.0   Min.   :    10.04   Length:465        \n 1st Qu.:  21.0   1st Qu.:  36.0   1st Qu.:    18.13   Class :character  \n Median :  52.0   Median :  87.0   Median :    23.60   Mode  :character  \n Mean   : 164.6   Mean   : 289.8   Mean   :  5242.13                     \n 3rd Qu.: 143.0   3rd Qu.: 231.0   3rd Qu.:    37.30                     \n Max.   :3245.0   Max.   :6071.0   Max.   :129451.00                     \n                                   NA's   :3                             \n\n\nAnd finally, we need to adjust the wage column. It seems that there is a mix of hourly and annual wage figures in this column. Let’s convert all of them to annual wages as a new variable, by multiplying any values below $200/hr by 2,080 hours/yr. We’ll do this by using mutate() to create the new variable, and define it using a case_when().2\n\nprojections_data &lt;- projections_data |&gt;\n    mutate(\n        annual_wage = case_when(\n            Wage &lt; 200 ~ Wage * 2080,\n            .default = Wage\n        )\n    )\n\nglimpse(projections_data)\n\nRows: 465\nColumns: 13\n$ SOC            &lt;chr&gt; \"11-1011\", \"11-1021\", \"11-1031\", \"11-2021\", \"11-2022\", …\n$ Occupation     &lt;chr&gt; \"Chief Executives\", \"General and Operations Managers\", …\n$ Current_jobs   &lt;dbl&gt; 1830, 14405, 336, 1777, 2537, 376, 2900, 3250, 5457, 13…\n$ Projected_jobs &lt;dbl&gt; 1671, 15779, 372, 1869, 2668, 413, 3152, 3353, 6422, 14…\n$ Change_num     &lt;dbl&gt; -159, 1374, 36, 92, 131, 37, 252, 103, 965, 87, 29, 228…\n$ Change_pct     &lt;dbl&gt; -0.0869, 0.0954, 0.1071, 0.0518, 0.0516, 0.0984, 0.0869…\n$ Growth         &lt;dbl&gt; -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, 3, 23, 0, 8, 3, 5…\n$ Exits          &lt;dbl&gt; 48, 301, 8, 36, 52, 10, 86, 54, 122, 27, 10, 30, 3, 24,…\n$ Transfers      &lt;dbl&gt; 71, 936, 17, 115, 164, 22, 151, 188, 298, 67, 24, 86, 8…\n$ Tot_openings   &lt;dbl&gt; 103, 1374, 29, 160, 229, 36, 262, 252, 516, 103, 37, 13…\n$ Wage           &lt;dbl&gt; 80.74, 47.63, 37738.00, 62.05, 61.39, 57.62, 47.73, 63.…\n$ Notes          &lt;chr&gt; NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, NA, NA, NA, NA,…\n$ annual_wage    &lt;dbl&gt; 167939.2, 99070.4, 37738.0, 129064.0, 127691.2, 119849.…\n\nsummary(projections_data)\n\n     SOC             Occupation         Current_jobs   Projected_jobs \n Length:465         Length:465         Min.   :  102   Min.   :  104  \n Class :character   Class :character   1st Qu.:  376   1st Qu.:  395  \n Mode  :character   Mode  :character   Median :  841   Median :  902  \n                                       Mean   : 2425   Mean   : 2618  \n                                       3rd Qu.: 2296   3rd Qu.: 2583  \n                                       Max.   :34936   Max.   :39662  \n                                                                      \n   Change_num        Change_pct           Growth            Exits       \n Min.   :-1948.0   Min.   :-0.35860   Min.   :-195.00   Min.   :   2.0  \n 1st Qu.:    5.0   1st Qu.: 0.01650   1st Qu.:   0.00   1st Qu.:  12.0  \n Median :   44.0   Median : 0.06850   Median :   4.00   Median :  30.0  \n Mean   :  193.9   Mean   : 0.07258   Mean   :  19.39   Mean   : 105.8  \n 3rd Qu.:  185.0   3rd Qu.: 0.12710   3rd Qu.:  18.00   3rd Qu.:  82.0  \n Max.   : 8608.0   Max.   : 0.58880   Max.   : 861.00   Max.   :2775.0  \n                                                                        \n   Transfers       Tot_openings         Wage              Notes          \n Min.   :   1.0   Min.   :   5.0   Min.   :    10.04   Length:465        \n 1st Qu.:  21.0   1st Qu.:  36.0   1st Qu.:    18.13   Class :character  \n Median :  52.0   Median :  87.0   Median :    23.60   Mode  :character  \n Mean   : 164.6   Mean   : 289.8   Mean   :  5242.13                     \n 3rd Qu.: 143.0   3rd Qu.: 231.0   3rd Qu.:    37.30                     \n Max.   :3245.0   Max.   :6071.0   Max.   :129451.00                     \n                                   NA's   :3                             \n  annual_wage    \n Min.   : 20883  \n 1st Qu.: 37710  \n Median : 48776  \n Mean   : 57792  \n 3rd Qu.: 75712  \n Max.   :179150  \n NA's   :3       \n\n\nAnd now we have a clean dataset! We’ll use this further in Chapter 3 and Chapter 4, so let’s show what it looks like all together.\n\nDataset #2 complete code\n\n# load libraries\nlibrary(\"readxl\")\nlibrary(\"curl\")\nlibrary(\"tidyverse\")\n\n# define file url\nprojections_url &lt;- \"https://ohiolmi.com/_docs/PROJ/JobsOhio/Central.xlsx\"\n\n# download file\ncurl_download(projections_url, \"projectionsdata.xlsx\")\n\n# read file with approrpiate settings\nprojections_data &lt;- read_xlsx(\n    \"projectionsdata.xlsx\",\n    skip = 6,\n    col_names = c(\n        \"SOC\",\n        \"Occupation\",\n        \"Current_jobs\",\n        \"Projected_jobs\",\n        \"Change_num\",\n        \"Change_pct\",\n        \"Growth\",\n        \"Exits\",\n        \"Transfers\",\n        \"Tot_openings\",\n        \"Wage\",\n        \"Notes\"\n    ),\n    col_types = c(\n        \"text\",\n        \"text\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"numeric\",\n        \"text\"\n    )\n    ) |&gt;\n\n    # remove summary occupations and notes/blank rows\n    filter(\n        str_sub(SOC, -4, -1) != \"0000\",\n        str_length(SOC) == 7\n        ) |&gt;\n        \n    # create annual wage column so values are consistent\n    mutate(\n        annual_wage = case_when(\n            Wage &lt; 200 ~ Wage * 2080,\n            .default = Wage\n        )\n    )"
  },
  {
    "objectID": "workingwithdata.html#exercises",
    "href": "workingwithdata.html#exercises",
    "title": "2  Importing and cleaning data",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nWe used functions from several tidyverse packages. Especially when learning, it’s nice to have quick references. Tidyverse has a series of official cheat sheets that you’ll likely find useful. Take a look:\n\n\n\npackage\nwhat this package is about\nsite\ncheat sheet\n\n\n\n\nreadxl\ndata import (esp. Excel files)\nsite\ncheat sheet\n\n\ndplyr\ndata transformation\nsite\ncheat sheet\n\n\nstringr\nworking with text\nsite\ncheat sheet\n\n\nfactors\ncategorical data\nsite\ncheat sheet"
  },
  {
    "objectID": "workingwithdata.html#extra-exporting-data",
    "href": "workingwithdata.html#extra-exporting-data",
    "title": "2  Importing and cleaning data",
    "section": "Extra: Exporting data",
    "text": "Extra: Exporting data\n\n\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686."
  },
  {
    "objectID": "workingwithdata.html#footnotes",
    "href": "workingwithdata.html#footnotes",
    "title": "2  Importing and cleaning data",
    "section": "",
    "text": "By default, the tidyverse read_ functions guess at column types by examining the fields, but it is imperfect.↩︎\ncase_when() is inspired by the SQL CASE statement, and is more elegant than nested IF() functions you may be used to using in Excel.↩︎"
  },
  {
    "objectID": "analysis.html#statistical-analysis",
    "href": "analysis.html#statistical-analysis",
    "title": "3  Statistical analysis & data visualizations",
    "section": "3.1 Statistical analysis",
    "text": "3.1 Statistical analysis\nR was created as a statistics-focused programming language, so it’s important to at least briefly showcase how R can be used to run statistical methods and quickly produce results that can then be visualized, used in reports, and stored for future use. However, institutional researchers come from many different backgrounds, and we don’t want to assume that all IR professionals reading this guide have the same level of knowledge of statistical methods. We’ll keep this section brief, but know that if a method exists, it likely has an implementation in R.\nIn this section we’ll build off of the occupational projections data that we worked with in Section 2.5, which is stored as the R data object projections_data.\n\nDescriptive statistics\nDuring data cleaning, we utilized the summary() function in conjunction with glimpse() to quickly examine a dataset. The summary() function displays basic descriptive statistics about every numeric variable in the dataset:\n\nsummary(projections_data)\n\n     SOC             Occupation         Current_jobs   Projected_jobs \n Length:465         Length:465         Min.   :  102   Min.   :  104  \n Class :character   Class :character   1st Qu.:  376   1st Qu.:  395  \n Mode  :character   Mode  :character   Median :  841   Median :  902  \n                                       Mean   : 2425   Mean   : 2618  \n                                       3rd Qu.: 2296   3rd Qu.: 2583  \n                                       Max.   :34936   Max.   :39662  \n                                                                      \n   Change_num        Change_pct           Growth            Exits       \n Min.   :-1948.0   Min.   :-0.35860   Min.   :-195.00   Min.   :   2.0  \n 1st Qu.:    5.0   1st Qu.: 0.01650   1st Qu.:   0.00   1st Qu.:  12.0  \n Median :   44.0   Median : 0.06850   Median :   4.00   Median :  30.0  \n Mean   :  193.9   Mean   : 0.07258   Mean   :  19.39   Mean   : 105.8  \n 3rd Qu.:  185.0   3rd Qu.: 0.12710   3rd Qu.:  18.00   3rd Qu.:  82.0  \n Max.   : 8608.0   Max.   : 0.58880   Max.   : 861.00   Max.   :2775.0  \n                                                                        \n   Transfers       Tot_openings         Wage              Notes          \n Min.   :   1.0   Min.   :   5.0   Min.   :    10.04   Length:465        \n 1st Qu.:  21.0   1st Qu.:  36.0   1st Qu.:    18.13   Class :character  \n Median :  52.0   Median :  87.0   Median :    23.60   Mode  :character  \n Mean   : 164.6   Mean   : 289.8   Mean   :  5242.13                     \n 3rd Qu.: 143.0   3rd Qu.: 231.0   3rd Qu.:    37.30                     \n Max.   :3245.0   Max.   :6071.0   Max.   :129451.00                     \n                                   NA's   :3                             \n  annual_wage    \n Min.   : 20883  \n 1st Qu.: 37710  \n Median : 48776  \n Mean   : 57792  \n 3rd Qu.: 75712  \n Max.   :179150  \n NA's   :3       \n\n\nHere we can quickly identify some important information about the dataset:\n\nit includes 465 occupations that currently employ a range of 102 to 34,936 persons,1\nthe typical occupation is projected to grow 7% over the next ten years,\nthe median occupation will have 87 opening each year,2 and\nthe median occupation pays $48,776.\n\n\n\nInferential statistics: linear regression\nNow let’s use linear regression to build a simple model. Let’s see whether annual wages might predict the rate at which persons leave an occupation.\nWe’ll first need to create an additonal variable to calculate the occupational turnover rate, which we’ll use as our outcome variable.\nThen we’ll use the lm function provided in base R. We’ll store the regression model as an R object, so we can work with it.\n\nprojections_data &lt;- projections_data |&gt;\n    mutate(\n        turnover_rate = (Exits + Transfers) / Current_jobs\n        )\n\nprojections_model &lt;- lm(turnover_rate ~ annual_wage, \n                            data = projections_data, na.action=na.exclude)\n\nsummary(projections_model)\n\n\nCall:\nlm(formula = turnover_rate ~ annual_wage, data = projections_data, \n    na.action = na.exclude)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.076254 -0.014932 -0.004293  0.010591  0.168017 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  1.464e-01  2.962e-03   49.44   &lt;2e-16 ***\nannual_wage -7.687e-07  4.637e-08  -16.58   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02709 on 460 degrees of freedom\n  (3 observations deleted due to missingness)\nMultiple R-squared:  0.374, Adjusted R-squared:  0.3726 \nF-statistic: 274.8 on 1 and 460 DF,  p-value: &lt; 2.2e-16\n\n\nYou can see that annual wages does appear to be a strong predictor of occupational turnover rate, since its coefficient is statistically significant and the model explains a considerable proportion of the variance.\nKeen-eyed readers will note that wages may not be sufficiently normal to use as a variable in linear regression and likely needs a data transformation. Variables with quantity often need a log transform to be treated as sufficiently normal. We can make a quick adjustment to our code for this, without even needing a new variable:\n\nprojections_model &lt;- lm(turnover_rate ~ log(annual_wage), \n                            data = projections_data, na.action=na.exclude)\n\nsummary(projections_model)\n\n\nCall:\nlm(formula = turnover_rate ~ log(annual_wage), data = projections_data, \n    na.action = na.exclude)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.070564 -0.013939 -0.001799  0.011336  0.151656 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       0.688846   0.029031   23.73   &lt;2e-16 ***\nlog(annual_wage) -0.054000   0.002669  -20.23   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02491 on 460 degrees of freedom\n  (3 observations deleted due to missingness)\nMultiple R-squared:  0.4708,    Adjusted R-squared:  0.4697 \nF-statistic: 409.3 on 1 and 460 DF,  p-value: &lt; 2.2e-16\n\n\nThis correction seems to have improved our model considerably, as the model now explains even more of the variance in occupational turnover rate.\nThe residuals may be of interest, so let’s pull them back into our projections_data:\n\nprojections_data &lt;- projections_data |&gt;\n    mutate(residuals = residuals(projections_model))\n\nglimpse(projections_data)\n\nRows: 465\nColumns: 15\n$ SOC            &lt;chr&gt; \"11-1011\", \"11-1021\", \"11-1031\", \"11-2021\", \"11-2022\", …\n$ Occupation     &lt;chr&gt; \"Chief Executives\", \"General and Operations Managers\", …\n$ Current_jobs   &lt;dbl&gt; 1830, 14405, 336, 1777, 2537, 376, 2900, 3250, 5457, 13…\n$ Projected_jobs &lt;dbl&gt; 1671, 15779, 372, 1869, 2668, 413, 3152, 3353, 6422, 14…\n$ Change_num     &lt;dbl&gt; -159, 1374, 36, 92, 131, 37, 252, 103, 965, 87, 29, 228…\n$ Change_pct     &lt;dbl&gt; -0.0869, 0.0954, 0.1071, 0.0518, 0.0516, 0.0984, 0.0869…\n$ Growth         &lt;dbl&gt; -16, 137, 4, 9, 13, 4, 25, 10, 96, 9, 3, 23, 0, 8, 3, 5…\n$ Exits          &lt;dbl&gt; 48, 301, 8, 36, 52, 10, 86, 54, 122, 27, 10, 30, 3, 24,…\n$ Transfers      &lt;dbl&gt; 71, 936, 17, 115, 164, 22, 151, 188, 298, 67, 24, 86, 8…\n$ Tot_openings   &lt;dbl&gt; 103, 1374, 29, 160, 229, 36, 262, 252, 516, 103, 37, 13…\n$ Wage           &lt;dbl&gt; 80.74, 47.63, 37738.00, 62.05, 61.39, 57.62, 47.73, 63.…\n$ Notes          &lt;chr&gt; NA, NA, \"**\", NA, NA, \"^\", \"^\", NA, NA, NA, NA, NA, NA,…\n$ annual_wage    &lt;dbl&gt; 167939.2, 99070.4, 37738.0, 129064.0, 127691.2, 119849.…\n$ turnover_rate  &lt;dbl&gt; 0.06502732, 0.08587296, 0.07440476, 0.08497468, 0.08513…\n$ residuals      &lt;dbl&gt; 0.0258700295, 0.0182162354, -0.0453703761, 0.0315996376…"
  },
  {
    "objectID": "analysis.html#data-visualizations",
    "href": "analysis.html#data-visualizations",
    "title": "3  Statistical analysis & data visualizations",
    "section": "3.2 Data visualizations",
    "text": "3.2 Data visualizations"
  },
  {
    "objectID": "analysis.html#extras",
    "href": "analysis.html#extras",
    "title": "3  Statistical analysis & data visualizations",
    "section": "Extras",
    "text": "Extras"
  },
  {
    "objectID": "analysis.html#footnotes",
    "href": "analysis.html#footnotes",
    "title": "3  Statistical analysis & data visualizations",
    "section": "",
    "text": "Though the summary occupation lines likely cover persons in all occupations, it seems an occupation has to have 100 or more workers to be included at a detail level in these reports.↩︎\nfrom growth ~4/yr, exits ~30/yr, and transfers ~52/yr. Exits are people in the occupation leaving the labor force (mainly retirements), while transfers are people moving into a different occupation.↩︎"
  },
  {
    "objectID": "reports.html#installing-quarto",
    "href": "reports.html#installing-quarto",
    "title": "4  Building parameterized reports",
    "section": "4.1 Installing Quarto",
    "text": "4.1 Installing Quarto\nQuarto is built-in to R Studio, so there’s likely nothing extra that you have to do. For Visual Studio Code, you’ll need to install the Quarto extension and Quarto itself from https://quarto.org/docs/get-started/. When you begin a Quarto project that includes .pdf output, you’ll be prompted to install TinyTex by using the OS Terminal command quarto install tinytex.\nUsing Quarto will require the R packages rmarkdown and knitr."
  },
  {
    "objectID": "reports.html#creating-a-quarto-document",
    "href": "reports.html#creating-a-quarto-document",
    "title": "4  Building parameterized reports",
    "section": "4.2 Creating a Quarto document",
    "text": "4.2 Creating a Quarto document\nQuarto documents use the .qmd extension, since Quarto makes extensive use of the markdown syntax. Markdown is a relatively simple coding scheme that is designed to be both human- and machine-readable.\n\n\n\n\n\n\nTip\n\n\n\nMarkdown is used extensively across the modern web, including at Reddit and Discord. GitHub, which we’ll discuss in Chapter 5, uses Markdown for its README.md files to allow developers to share info about their projects in a visually appealing manner.\n\n\nYou can create a Quarto document simply by creating a new file with the extension .qmd. However, both R Studio and Visual Studio Code include menus to utilize templates that give you a great place to start. Go ahead and start a new Quarto project.\n\nQuarto document header\nThe first section of a Quarto document is the header. The header is comprised of a special series of tags that define how the document should be rendered, in a format called YAML1. A very simple such example is to simply define the document’s title:\n---\ntitle: \"New Quarto Project\"\n---\nThe Quarto authoring tutorial introduces you to additional options that you can define in the YAML header.\n\n\nBasic markdown\nNext, we can begin to write out the explanatory text in our document. It is of course helpful to break our document into sections. It is simple to arrange cascading sections by using the # symbol. Using two such symbols consecutively, ##, defines a top-level section header, while additional ones (###, ####) define additional levels.\nWithin regular text you can add links in different ways:\n\n&lt;https://oairp.org/&gt; renders as https://oairp.org\n[the OAIRP website](https://oairp.org/) renders as the OAIRP website\n\nAs well as emphasize text:\n\n*italics* renders as italics\n**bold** renders as bold\n\nWe can use *, +, or - to create lists – they just have to have a blank line between the list and any text above.\nThe Quarto documentation has a great overview of the basics of Markdown.\nLet’s use some of these to continue to build out our .qmd file by adding the following after the header:\n---\ntitle: \"New Quarto Project\"\n---\n\n## Quarto\n\nQuarto is a fantastic way to get started writing reports \nwithout spending **a ton of time** messing with things like: \n\n* font sizes\n* styles\n* spacing\n\nQuarto has excellent documentation at &lt;https://quarto.org&gt;.\n\n\nCode blocks\nFinally, we’ll get back to using R code to run some simple calculations and include the result. We do this by adding a code block. A code block opens and closes with the ``` sequence. Using curly brackets after the code block opening sequence ({}), we define the language that the code block is running: for R, this is {R}.2 Inside, we’ll include the code that will produce the output we’d like to show:\n---\ntitle: \"New Quarto Project\"\n---\n\n## Quarto\n\nQuarto is a fantastic way to get started writing reports \nwithout spending **a ton of time** messing with things like: \n\n* font sizes\n* styles\n* spacing\n\nQuarto has excellent documentation at &lt;https://quarto.org&gt;.\n\n```{R}\ncalc &lt;- 1 + 1\nprint(calc)\n```\nTest this code yourself. You should see it render like it does in Appendix A.\n\n\n\n\n\n\nNote\n\n\n\nBy default, the code block prints both the code and the result. We can add special execution options at the start of the code block to define how it should be processed. Those options start with a special preface #|. Adding the echo: false execution option will suppress the code and only show the output:\n```{R}\n#| echo: false\ncalc &lt;- 1 + 1\nprint(calc)\n```\nYou can review additional Execution Options in the Quarto guide."
  },
  {
    "objectID": "reports.html#in-practice-a-full-report-build",
    "href": "reports.html#in-practice-a-full-report-build",
    "title": "4  Building parameterized reports",
    "section": "4.3 In Practice: A full report build",
    "text": "4.3 In Practice: A full report build\nneeds content"
  },
  {
    "objectID": "reports.html#parameterizing-your-report",
    "href": "reports.html#parameterizing-your-report",
    "title": "4  Building parameterized reports",
    "section": "4.4 Parameterizing your report",
    "text": "4.4 Parameterizing your report\nneeds content"
  },
  {
    "objectID": "reports.html#exercises",
    "href": "reports.html#exercises",
    "title": "4  Building parameterized reports",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nPractice using markdown. How would you:\n\nEmphasize text?\nCreate a link with custom text?\nAdd an image?\nCreate a numbered list?\n\nTake a look at the RStudio cheat sheet for Quarto and the cheet sheet for rmarkdown, specifically the section to the far right titled “Write with Markdown.”3\n\n\nExercise 2\nBranstorm a few different ways you might use parameters to create a series of reports that utilize much of the same code."
  },
  {
    "objectID": "reports.html#extra-other-quarto-document-types",
    "href": "reports.html#extra-other-quarto-document-types",
    "title": "4  Building parameterized reports",
    "section": "Extra: Other Quarto document types",
    "text": "Extra: Other Quarto document types\nThough you may be most interested in creating a report or article, Quarto is capable of generating other document types, including powerpoints, websites, and ebooks.\nThose types do get a bit more complicated, but rely on many of the basics you’ve learned in this section as building blocks. The [Quarto guide] details these possibilities.\nThis guide itself is written as a Quarto ebook, as are other resources like R for Data Science (Wickham, Çetinkaya-Rundel, and Grolemund 2023). If interested in seeing examples of quarto projects in action, you can browse their code on GitHub, which we’ll learn in Chapter 5.\n\n\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. \"O’Reilly Media, Inc.\". https://r4ds.hadley.nz/."
  },
  {
    "objectID": "reports.html#footnotes",
    "href": "reports.html#footnotes",
    "title": "4  Building parameterized reports",
    "section": "",
    "text": "YAML stands for Yet Another Markup Language, but don’t worry - there’s not actually much to learn↩︎\nQuarto also works with other languages, including Python and Julia↩︎\nQuarto is an evolution of rmarkdown, adding additional functionality and programming languages.↩︎"
  },
  {
    "objectID": "collaboration.html#setting-up-github",
    "href": "collaboration.html#setting-up-github",
    "title": "5  Collaborating on code",
    "section": "5.1 Setting up GitHub",
    "text": "5.1 Setting up GitHub\nGitHub is a developer platform to host code and provide for collaboration. Now owned by Microsoft, it has added numerous complex features that can help in software development. As professionals focused on data analytics, we’ll just focus on the core code-hosting and collaboration tools for now.\nHead to https://github.com/ and create a new account if you do not already have one.\n\n\n\n\n\n\nNote\n\n\n\nThere’s no need to have multiple accounts like one for work and one for personal. In fact, GitHub recommends having just one account. You can add multiple email addresses to your GitHub account, and your GitHub account can be a member of an organization that hosts repositories.\n\n\nOnce you have your GitHub account, you’ll be able to connect it with Git when we install it in Section 5.3."
  },
  {
    "objectID": "collaboration.html#an-overview-of-github",
    "href": "collaboration.html#an-overview-of-github",
    "title": "5  Collaborating on code",
    "section": "5.2 An overview of GitHub",
    "text": "5.2 An overview of GitHub\nWhen you log into GitHub, you’ll be presented with a dashboard that may be fairly empty. You can reach your profile by clicking on the icon in the top right. It will look similar to:\n\n\n\nA GitHub profile overview. In the center is a summary of recent contributions of code. To the left is a set of personal info that you can add in settings, plus a list of organizations that you are a member of on GitHub. At the top, you can see a menu that begins with Overview.\n\n\nA GitHub organization is a special type of GitHub account that can host code projects. Personal GitHub accounts can be added as members of the organization. Organizations can have multiple teams within the organization - you should check with others at your institution before creating one.\nWe’ve created a GitHub Organization for the Ohio Association for Institutional Research and Planning: https://github.com/oairp. If you click on it, you should see the following:\n\n\n\nThe OAIRP GitHub Organization page. It shows as hosting two repositories, or code projects: one special repository (.github) that holds the summary README.md file displayed and one for this guide. You can also see that the authors of this guide are members of the organization.\n\n\nAt this point, you’ve noticed that both the personal account profile page and the organizational profile page have top navigation bars that begin with Overview and Repositories. Repositories, or repos for short, are essentially code projects.2 Go ahead and click into the PoweringIRwithR repo:\n\nHere you can see the source code for this guide, and an overview of the most recent changes to the various files. You will also notice that the repo has one branch (main), two collaborators (the authors), and a deployment to GitHub Pages. The buttons towards the top allow you to follow the project in different ways and even make a copy of the project for yourself."
  },
  {
    "objectID": "collaboration.html#sec-Gitsetup",
    "href": "collaboration.html#sec-Gitsetup",
    "title": "5  Collaborating on code",
    "section": "5.3 Setting up Git",
    "text": "5.3 Setting up Git\nGit is a free, open-source version control system. When enabled, it keeps track of changes you make to your code, and is small and fast so you won’t notice it’s enabled. Install Git at https://git-scm.com/ - click on Downloads then your operating system. Accept the defaults, particularly to use the main branch as the default branch and to enable Git Credential Manager, which will enable you to connect with GitHub.\nThere is one thing you’ll need to do to make Git operational after you install - you’ll have to let it know who you are. This is so it can track who is making the file changes to your projects that you are working on. Run the following code in your OS terminal, but be sure to replace you@example.com and Your Name with your own information.\n\n\nTerminal\n\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n\nThough Git can be used locally, a lot of the power of using Git is in connecting with an online repository and collaborative version control system like GitHub.\n\n\n\n\n\n\nNote\n\n\n\nYou’ll want to associate the email address you use in Git with your GitHub account, so that your edits can be properly associated with your account."
  },
  {
    "objectID": "collaboration.html#sec-syncGitHub",
    "href": "collaboration.html#sec-syncGitHub",
    "title": "5  Collaborating on code",
    "section": "5.4 Syncing a project with GitHub",
    "text": "5.4 Syncing a project with GitHub\nneeds content\n\nSetting up a project started on GitHub to sync locally\nneeds content\n\n\nSetting up a project started locally to sync with GitHub"
  },
  {
    "objectID": "collaboration.html#the-basics-of-git-operations",
    "href": "collaboration.html#the-basics-of-git-operations",
    "title": "5  Collaborating on code",
    "section": "5.5 The basics of Git operations",
    "text": "5.5 The basics of Git operations\nneeds content\n\n\n\n\n\n\nNote\n\n\n\nThere are additional Git concepts that may be helpful if you are working in a larger team:\n\nmerge conflict\n\nan issue that occurs when multiple changes are being made to the same line(s) of code. Push/sync will return an error until resolved, typically by making changes to the file that is blocked by the merge conflict.\n\nbranch\n\nan additional copy of the code that can be used when a developer or team of developers are working on a set of features in development. This ensures that the main copy is not affected during the development.\n\nmerge branch\n\nthe process of merging new features created by a separate branch back to the main branch.\n\n\nThe details of these are beyond the scope of this guide, but it’s helpful to know about them so you know when you may want to learn more. One resource is the Git & GitHub RStudio cheat sheet."
  },
  {
    "objectID": "collaboration.html#exercises",
    "href": "collaboration.html#exercises",
    "title": "5  Collaborating on code",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nLog into GitHub and navigate to the PoweringIRwithR repository. Star it!\n\n\nExercise 2\nSearch \"institutional research\" on GitHub. Find something intersting!"
  },
  {
    "objectID": "collaboration.html#extra-about-github-pages",
    "href": "collaboration.html#extra-about-github-pages",
    "title": "5  Collaborating on code",
    "section": "Extra: About GitHub Pages",
    "text": "Extra: About GitHub Pages\nGitHub Pages is a website hosting service for GitHub accounts and public projects.\nYou can use Quarto to generate the files needed for a website or ebook, publish them to GitHub, set up GitHub pages, and then view your project site live on the web!\nAccount sites are in the format username.github.io while projects are hosted as username.github.io/reponame.\nThis guide was created as an ebook in Quarto and is hosted by GitHub & GitHub Pages. Since this guide is the PoweringIRwithR repo hosted by the OAIRP organization, the URL is https://oairp.github.io/PoweringIRwithR."
  },
  {
    "objectID": "collaboration.html#footnotes",
    "href": "collaboration.html#footnotes",
    "title": "5  Collaborating on code",
    "section": "",
    "text": "In our experience, most solo IR practitioners wish to be part of a team one day!↩︎\nNot to be confused with what is labeled in GitHub as Projects, which is a project management tool to assist with tracking tasks associated with larger code projects↩︎"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "R Core Team. 2023. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy\nD’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019.\n“Welcome to the tidyverse.”\nJournal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. \"O’Reilly Media, Inc.\". https://r4ds.hadley.nz/."
  },
  {
    "objectID": "examplebasicquarto.html#quarto",
    "href": "examplebasicquarto.html#quarto",
    "title": "Appendix A — New Quarto Project",
    "section": "Quarto",
    "text": "Quarto\nQuarto is a fantastic way to get started writing reports without spending a ton of time messing with things like:\n\nfont sizes\nstyles\nspacing\n\nQuarto has excellent documentation at https://quarto.org.\n\ncalc &lt;- 1 + 1\nprint(calc)\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About the authors",
    "section": "",
    "text": "The guide and workshop were developed by:\nThomas Jay Benjamin is the Director for Institutional Research at Lorain County Community College. Thomas began using R following a workshop at the Spring 2019 OAIRP conference and has used it to assist with IPEDS, benchmarking, evaluation, and parameterized reporting (which he presented at the Spring 2023 OAIRP virtual conference). Most recently Thomas hosted an intern from LCCC’s Data Analytics program who learned R during his experience.\nLynzee Murray serves as an analyst within the Office of Institutional Effectiveness at Columbus State Community College. Her introduction to R and RStudio occurred during her master’s program in Data Analytics at Bowling Green State University. During her tenure at Columbus State, Lynzee has utilized R for crafting data visualizations, conducting text analysis, and constructing comparison groups through propensity score matching.\nThomas and Lynzee can be contacted through the OAIRP Membership Portal."
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "Thomas & Lynzee thank the OAIRP Executive Committee for their support in hosting this workshop and guide."
  }
]